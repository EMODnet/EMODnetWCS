[{"path":"https://emodnet.github.io/EMODnetWCS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 European Marine Observation Data Network (EMODnet) Biology project Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/EMODnetWCS.html","id":"wcs-basics","dir":"Articles","previous_headings":"","what":"WCS Basics","title":"Get Started with EMODnetWCS","text":"Web Coverage Service (WCS) standard issued Open Geospatial Consortium (OGC). designed simplify remote access coverages, commonly known raster maps GIS. WCS functions HTTP protocol, setting obtain data meta-data using requests available protocol. practice allows metadata raster maps obtained web browser programme uses protocol. standard composed three core requests, particular purpose: GetCapabilities: request provides information particular service. DescribeCoverage: request provides detailed information particular coverage. GetCoverage: request actually obtains coverage data. WCS requests handled EMODnetWCS package ows4R. ows4R uses R6 classes implements encapsulated object-oriented programming paradigm may unfamiliar R users. EMODnetWCS wraps ows4R aims provide familiar workflows return familiar, usable easy review outputs. also provides checks validations ensure smooth easy interaction EMODnet WCS services. can however use ows4R EMODnet WCS endpoints prefer.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/EMODnetWCS.html","id":"emodnet-wcs-services","dir":"Articles","previous_headings":"","what":"EMODnet WCS Services","title":"Get Started with EMODnetWCS","text":"EMODnet portals provide number Web Coverage Services (WCS) support requests coverage data (rasters) gridded data products.","code":"library(EMODnetWCS) #> Loading required package: ows4R #> Loading required package: geometa #> Loading ISO 19139 XML schemas... #> Loading ISO 19115 codelists... #> Loading IANA mime types... #> No encoding supplied: defaulting to UTF-8. #> Loading required package: keyring"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/EMODnetWCS.html","id":"available-services","dir":"Articles","previous_headings":"EMODnet WCS Services","what":"Available services","title":"Get Started with EMODnetWCS","text":"returns R6 object class [<WCSClient>]. can use methods provided within class wish (see ows4R details). EMODnetWCS however provides host functions extracting/compiling useful metadata variety forms well downloading raster data EMODnetWCS service.","code":"emdn_wcs() #> # A tibble: 5 × 2 #>   service_name     service_url                                                   #>   <chr>            <chr>                                                         #> 1 bathymetry       https://ows.emodnet-bathymetry.eu/wcs                         #> 2 biology          https://geo.vliz.be/geoserver/Emodnetbio/wcs                  #> 3 human_activities https://ows.emodnet-humanactivities.eu/wcs                    #> 4 physics          https://geoserver.emodnet-physics.eu/geoserver/wcs            #> 5 seabed_habitats  https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open… wcs <- emdn_init_wcs_client(\"biology\") #> ✔ WCS client created succesfully #> ℹ Service: <https://geo.vliz.be/geoserver/Emodnetbio/wcs> #> ℹ Service: \"2.0.1\"  wcs #> <WCSClient> #>   Inherits from: <OWSClient> #>   Public: #>     attrs: list #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     clone: function (deep = FALSE)  #>     defaults: list #>     describeCoverage: function (identifier)  #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     ERROR: function (text)  #>     getCapabilities: function ()  #>     getCASUrl: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getConfig: function ()  #>     getCoverage: function (identifier, bbox = NULL, crs = NULL, time = NULL, format = NULL,  #>     getHeaders: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getPwd: function ()  #>     getToken: function ()  #>     getUrl: function ()  #>     getUser: function ()  #>     getVersion: function ()  #>     INFO: function (text)  #>     initialize: function (url, serviceVersion = NULL, user = NULL, pwd = NULL,  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     reloadCapabilities: function ()  #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     version: 2.0.1 #>     WARN: function (text)  #>     wrap: FALSE #>   Private: #>     cas_url: NULL #>     config: request #>     fromComplexTypes: function (value)  #>     headers: EMODnetWCS R package https://github.com/EMODnet/EMODnetWCS #>     pwd: NULL #>     serviceName: WCS #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     token: NULL #>     user: NULL #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\") wcs <- emdn_init_wcs_client(\"biology\", logger = \"INFO\") #> [ows4R][INFO] OWSGetCapabilities - Fetching https://geo.vliz.be/geoserver/Emodnetbio/wcs?service=WCS&version=2.0.1&request=GetCapabilities  #>  Downloading: 7.9 kB      Downloading: 7.9 kB      Downloading: 8.2 kB      Downloading: 8.2 kB      Downloading: 16 kB      Downloading: 16 kB      Downloading: 16 kB      Downloading: 16 kB      Downloading: 21 kB      Downloading: 21 kB      Downloading: 21 kB      Downloading: 21 kB #>  [32m✔ [39m WCS client created succesfully #>  [36mℹ [39m Service:  [3m [34m [3m [34m<https://geo.vliz.be/geoserver/Emodnetbio/wcs> [34m [3m [39m [23m #>  [36mℹ [39m Service:  [34m [34m\"2.0.1\" [34m [39m wcs <- emdn_init_wcs_client(\"biology\", logger = \"DEBUG\") #> [ows4R][INFO] OWSGetCapabilities - Fetching https://geo.vliz.be/geoserver/Emodnetbio/wcs?service=WCS&version=2.0.1&request=GetCapabilities #> ✔ WCS client created succesfully #> ℹ Service: <https://geo.vliz.be/geoserver/Emodnetbio/wcs> #> ℹ Service: \"2.0.1\""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"downloading-extracting-compiled-metadata-on-services-and-coverages-","dir":"Articles","previous_headings":"","what":"Downloading & extracting compiled metadata on services and coverages.","title":"Getting metadata about Services & Coverages","text":"First let’s load package initiate client \"biology\" EMODnet WCS server.","code":"library(EMODnetWCS) #> Loading required package: ows4R #> Loading required package: geometa #> Loading ISO 19139 XML schemas... #> Loading ISO 19115 codelists... #> Loading IANA mime types... #> IANA website not reachable, skipping IANA mime types loading... #> Loading required package: keyring wcs <- emdn_init_wcs_client(service = \"biology\") #> ✔ WCS client created succesfully #> ℹ Service: <https://geo.vliz.be/geoserver/Emodnetbio/wcs> #> ℹ Service: \"2.0.1\""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"getting-services-level-and-coverage-level-summary-metadata-","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages.","what":"Getting services level and coverage level summary metadata.","title":"Getting metadata about Services & Coverages","text":"get service level subset coverage level compiled metadata, can use function emdn_get_wcs_info(). can supply <WCSClient> object argument wcs get compiled metadata server. can get informationby supplying service name argument service instead <WCSClient> object argument wcs. function returns list service level metadata includes tibble summaries coverage level metadata coverage_details element. Let’s take closer look metadata coverage_details. details metadata, look emdn_get_wcs_info() help page (use ?emdn_get_wcs_info R Rstudio). can get metadata EMODnet WCS services using emdn_get_wcs_info_all(). Note however can take long time execute.","code":"wcs_info <- emdn_get_wcs_info(wcs = wcs) #> Loading required package: sf #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE  wcs_info #> $data_source #> [1] \"emodnet_wcs\" #>  #> $service_name #> [1] \"biology\" #>  #> $service_url #> [1] \"https://geo.vliz.be/geoserver/Emodnetbio/wcs\" #>  #> $service_title #> [1] \"EMODnet Biology\" #>  #> $service_abstract #> [1] \"The EMODnet Biology products include a set of gridded map layers showing the average abundance of marine species for different time windows (seasonal, annual) using geospatial modelling. The spatial modelling tool used to calculate the gridded abundance maps is based on DIVA. DIVA (Data-Interpolating Variational Analysis) is a tool to create gridded data sets from discrete point measurements of the ocean. For the representation of time dynamics, it was decided to produce gridded maps for sliding time windows, e.g. combining one or more years  in one gridded map, so that relatively smooth animated GIF presentations can be produced that show the essential change over time. EMODnet Biology’s data products include the Operational Ocean Products and Services (OOPS), harvested by ICES.\" #>  #> $service_access_constraits #> [1] \"NONE\" #>  #> $service_fees #> [1] \"NONE\" #>  #> $service_type #> [1] \"urn:ogc:service:wcs\" #>  #> $coverage_details #> # A tibble: 10 × 9 #>    coverage_id        dim_n dim_n…¹ extent crs   wgs84…² tempo…³ verti…⁴ subtype #>    <chr>              <int> <chr>   <chr>  <chr> <chr>   <chr>   <chr>   <chr>   #>  1 Emodnetbio__ratio…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  2 Emodnetbio__aca_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  3 Emodnetbio__cal_f…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  4 Emodnetbio__cal_h…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  5 Emodnetbio__met_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  6 Emodnetbio__oit_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  7 Emodnetbio__tem_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  8 Emodnetbio__chli_…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  9 Emodnetbio__tot_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #> 10 Emodnetbio__tot_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #> # … with abbreviated variable names ¹​dim_names, ²​wgs84_bbox, ³​temporal_extent, #> #   ⁴​vertical_extent emdn_get_wcs_info(service = \"biology\") #> ✔ WCS client created succesfully #> ℹ Service: <https://geo.vliz.be/geoserver/Emodnetbio/wcs> #> ℹ Service: \"2.0.1\" #> $data_source #> [1] \"emodnet_wcs\" #>  #> $service_name #> [1] \"biology\" #>  #> $service_url #> [1] \"https://geo.vliz.be/geoserver/Emodnetbio/wcs\" #>  #> $service_title #> [1] \"EMODnet Biology\" #>  #> $service_abstract #> [1] \"The EMODnet Biology products include a set of gridded map layers showing the average abundance of marine species for different time windows (seasonal, annual) using geospatial modelling. The spatial modelling tool used to calculate the gridded abundance maps is based on DIVA. DIVA (Data-Interpolating Variational Analysis) is a tool to create gridded data sets from discrete point measurements of the ocean. For the representation of time dynamics, it was decided to produce gridded maps for sliding time windows, e.g. combining one or more years  in one gridded map, so that relatively smooth animated GIF presentations can be produced that show the essential change over time. EMODnet Biology’s data products include the Operational Ocean Products and Services (OOPS), harvested by ICES.\" #>  #> $service_access_constraits #> [1] \"NONE\" #>  #> $service_fees #> [1] \"NONE\" #>  #> $service_type #> [1] \"urn:ogc:service:wcs\" #>  #> $coverage_details #> # A tibble: 10 × 9 #>    coverage_id        dim_n dim_n…¹ extent crs   wgs84…² tempo…³ verti…⁴ subtype #>    <chr>              <int> <chr>   <chr>  <chr> <chr>   <chr>   <chr>   <chr>   #>  1 Emodnetbio__ratio…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  2 Emodnetbio__aca_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  3 Emodnetbio__cal_f…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  4 Emodnetbio__cal_h…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  5 Emodnetbio__met_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  6 Emodnetbio__oit_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  7 Emodnetbio__tem_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  8 Emodnetbio__chli_…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  9 Emodnetbio__tot_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #> 10 Emodnetbio__tot_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #> # … with abbreviated variable names ¹​dim_names, ²​wgs84_bbox, ³​temporal_extent, #> #   ⁴​vertical_extent emdn_get_wcs_info_all()"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"getting-coverage-level-detailed-metadata","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages.","what":"Getting coverage level detailed metadata","title":"Getting metadata about Services & Coverages","text":"can get detailed coverage metadata specific coverage using function emdn_get_coverage_info() supplying character vector coverage_ids. , can get information supplying service name argument service instead <WCSClient> object argument wcs. function returns tibble detailed coverage level metadata. Let’s take closer look. details metadata, look emdn_get_coverage_info() help page (use ?emdn_get_coverage_info R Rstudio). Note minimize number requests sent webservices, functions use memoise cache results inside active R session. clear cache, re-start R run memoise::forget(emdn_get_wcs_info)/memoise::forget(emdn_get_coverage_info)","code":"cov_info <- emdn_get_coverage_info(wcs,                                     coverage_ids = c(                                        \"Emodnetbio__ratio_large_to_small_19582016_L1_err\",                                        \"Emodnetbio__aca_spp_19582016_L1\"                                    ) )  cov_info"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"getting-individual-coverage-level-metadata","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages.","what":"Getting individual coverage level metadata","title":"Getting metadata about Services & Coverages","text":"functions compile concatenate metadata primarily tabular form easier review. However package offers number functions extracting individual metadata usable forms.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"getting-metadata-from-a-wcsclient-object-","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata","what":"Getting metadata from a <WCSClient> object.","title":"Getting metadata about Services & Coverages","text":"metadata can retrieved directly <WCSClient> object.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-coverage_ids","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSClient> object.","what":"Get coverage_ids","title":"Getting metadata about Services & Coverages","text":"can extract character vector available coverage IDs service function emdn_get_coverage_ids() can also check whether coverage given type dimension. get coefficients (points given dimension) data available specific coverages. detailed metadata requires call server return object class <WCSCoverageSummary>. can use emdn_get_coverage_summaries() get <WCSCoverageSummary> objects specific coverages. Alternativelly can request <WCSCoverageSummary> objects coverages available service. functions return list objects class <WCSCoverageSummary>, one coverage requested / available service. objects can used extract individual metadata.","code":"emdn_get_coverage_ids(wcs) #>  [1] \"Emodnetbio__ratio_large_to_small_19582016_L1_err\" #>  [2] \"Emodnetbio__aca_spp_19582016_L1\"                  #>  [3] \"Emodnetbio__cal_fin_19582016_L1_err\"              #>  [4] \"Emodnetbio__cal_hel_19582016_L1_err\"              #>  [5] \"Emodnetbio__met_luc_19582016_L1_err\"              #>  [6] \"Emodnetbio__oit_spp_19582016_L1_err\"              #>  [7] \"Emodnetbio__tem_lon_19582016_L1_err\"              #>  [8] \"Emodnetbio__chli_19582016_L1_err\"                 #>  [9] \"Emodnetbio__tot_lar_19582016_L1_err\"              #> [10] \"Emodnetbio__tot_sma_19582016_L1_err\" # Check for temporal dimension emdn_has_dimension(   wcs,   coverage_ids = c(       \"Emodnetbio__ratio_large_to_small_19582016_L1_err\",       \"Emodnetbio__cal_fin_19582016_L1_err\"    ),   type = \"temporal\" ) #> Emodnetbio__ratio_large_to_small_19582016_L1_err  #>                                             TRUE  #>              Emodnetbio__cal_fin_19582016_L1_err  #>                                             TRUE  # Check for vertical dimension emdn_has_dimension(   wcs,   coverage_ids = c(       \"Emodnetbio__ratio_large_to_small_19582016_L1_err\",       \"Emodnetbio__cal_fin_19582016_L1_err\"    ),   type = \"vertical\" ) #> Emodnetbio__ratio_large_to_small_19582016_L1_err  #>                                            FALSE  #>              Emodnetbio__cal_fin_19582016_L1_err  #>                                            FALSE emdn_get_coverage_dim_coefs(wcs,                             coverage_ids = c(                                 \"Emodnetbio__ratio_large_to_small_19582016_L1_err\",                                 \"Emodnetbio__cal_fin_19582016_L1_err\"                              ),                             type = \"temporal\") #> $Emodnetbio__ratio_large_to_small_19582016_L1_err #>   [1] \"1958-02-16T00:00:00.000Z\" \"1958-05-16T00:00:00.000Z\" #>   [3] \"1958-08-16T00:00:00.000Z\" \"1958-11-16T00:00:00.000Z\" #>   [5] \"1959-02-16T00:00:00.000Z\" \"1959-05-16T00:00:00.000Z\" #>   [7] \"1959-08-16T00:00:00.000Z\" \"1959-11-16T00:00:00.000Z\" #>   [9] \"1960-02-16T00:00:00.000Z\" \"1960-05-16T00:00:00.000Z\" #>  [11] \"1960-08-16T00:00:00.000Z\" \"1960-11-16T00:00:00.000Z\" #>  [13] \"1961-02-16T00:00:00.000Z\" \"1961-05-16T00:00:00.000Z\" #>  [15] \"1961-08-16T00:00:00.000Z\" \"1961-11-16T00:00:00.000Z\" #>  [17] \"1962-02-16T00:00:00.000Z\" \"1962-05-16T00:00:00.000Z\" #>  [19] \"1962-08-16T00:00:00.000Z\" \"1962-11-16T00:00:00.000Z\" #>  [21] \"1963-02-16T00:00:00.000Z\" \"1963-05-16T00:00:00.000Z\" #>  [23] \"1963-08-16T00:00:00.000Z\" \"1963-11-16T00:00:00.000Z\" #>  [25] \"1964-02-16T00:00:00.000Z\" \"1964-05-16T00:00:00.000Z\" #>  [27] \"1964-08-16T00:00:00.000Z\" \"1964-11-16T00:00:00.000Z\" #>  [29] \"1965-02-16T00:00:00.000Z\" \"1965-05-16T00:00:00.000Z\" #>  [31] \"1965-08-16T00:00:00.000Z\" \"1965-11-16T00:00:00.000Z\" #>  [33] \"1966-02-16T00:00:00.000Z\" \"1966-05-16T00:00:00.000Z\" #>  [35] \"1966-08-16T00:00:00.000Z\" \"1966-11-16T00:00:00.000Z\" #>  [37] \"1967-02-16T00:00:00.000Z\" \"1967-05-16T00:00:00.000Z\" #>  [39] \"1967-08-16T00:00:00.000Z\" \"1967-11-16T00:00:00.000Z\" #>  [41] \"1968-02-16T00:00:00.000Z\" \"1968-05-16T00:00:00.000Z\" #>  [43] \"1968-08-16T00:00:00.000Z\" \"1968-11-16T00:00:00.000Z\" #>  [45] \"1969-02-16T00:00:00.000Z\" \"1969-05-16T00:00:00.000Z\" #>  [47] \"1969-08-16T00:00:00.000Z\" \"1969-11-16T00:00:00.000Z\" #>  [49] \"1970-02-16T00:00:00.000Z\" \"1970-05-16T00:00:00.000Z\" #>  [51] \"1970-08-16T00:00:00.000Z\" \"1970-11-16T00:00:00.000Z\" #>  [53] \"1971-02-16T00:00:00.000Z\" \"1971-05-16T00:00:00.000Z\" #>  [55] \"1971-08-16T00:00:00.000Z\" \"1971-11-16T00:00:00.000Z\" #>  [57] \"1972-02-16T00:00:00.000Z\" \"1972-05-16T00:00:00.000Z\" #>  [59] \"1972-08-16T00:00:00.000Z\" \"1972-11-16T00:00:00.000Z\" #>  [61] \"1973-02-16T00:00:00.000Z\" \"1973-05-16T00:00:00.000Z\" #>  [63] \"1973-08-16T00:00:00.000Z\" \"1973-11-16T00:00:00.000Z\" #>  [65] \"1974-02-16T00:00:00.000Z\" \"1974-05-16T00:00:00.000Z\" #>  [67] \"1974-08-16T00:00:00.000Z\" \"1974-11-16T00:00:00.000Z\" #>  [69] \"1975-02-16T00:00:00.000Z\" \"1975-05-16T00:00:00.000Z\" #>  [71] \"1975-08-16T00:00:00.000Z\" \"1975-11-16T00:00:00.000Z\" #>  [73] \"1976-02-16T00:00:00.000Z\" \"1976-05-16T00:00:00.000Z\" #>  [75] \"1976-08-16T00:00:00.000Z\" \"1976-11-16T00:00:00.000Z\" #>  [77] \"1977-02-16T00:00:00.000Z\" \"1977-05-16T00:00:00.000Z\" #>  [79] \"1977-08-16T00:00:00.000Z\" \"1977-11-16T00:00:00.000Z\" #>  [81] \"1978-02-16T00:00:00.000Z\" \"1978-05-16T00:00:00.000Z\" #>  [83] \"1978-08-16T00:00:00.000Z\" \"1978-11-16T00:00:00.000Z\" #>  [85] \"1979-02-16T00:00:00.000Z\" \"1979-05-16T00:00:00.000Z\" #>  [87] \"1979-08-16T00:00:00.000Z\" \"1979-11-16T00:00:00.000Z\" #>  [89] \"1980-02-16T00:00:00.000Z\" \"1980-05-16T00:00:00.000Z\" #>  [91] \"1980-08-16T00:00:00.000Z\" \"1980-11-16T00:00:00.000Z\" #>  [93] \"1981-02-16T00:00:00.000Z\" \"1981-05-16T00:00:00.000Z\" #>  [95] \"1981-08-16T00:00:00.000Z\" \"1981-11-16T00:00:00.000Z\" #>  [97] \"1982-02-16T00:00:00.000Z\" \"1982-05-16T00:00:00.000Z\" #>  [99] \"1982-08-16T00:00:00.000Z\" \"1982-11-16T00:00:00.000Z\" #> [101] \"1983-02-16T00:00:00.000Z\" \"1983-05-16T00:00:00.000Z\" #> [103] \"1983-08-16T00:00:00.000Z\" \"1983-11-16T00:00:00.000Z\" #> [105] \"1984-02-16T00:00:00.000Z\" \"1984-05-16T00:00:00.000Z\" #> [107] \"1984-08-16T00:00:00.000Z\" \"1984-11-16T00:00:00.000Z\" #> [109] \"1985-02-16T00:00:00.000Z\" \"1985-05-16T00:00:00.000Z\" #> [111] \"1985-08-16T00:00:00.000Z\" \"1985-11-16T00:00:00.000Z\" #> [113] \"1986-02-16T00:00:00.000Z\" \"1986-05-16T00:00:00.000Z\" #> [115] \"1986-08-16T00:00:00.000Z\" \"1986-11-16T00:00:00.000Z\" #> [117] \"1987-02-16T00:00:00.000Z\" \"1987-05-16T00:00:00.000Z\" #> [119] \"1987-08-16T00:00:00.000Z\" \"1987-11-16T00:00:00.000Z\" #> [121] \"1988-02-16T00:00:00.000Z\" \"1988-05-16T00:00:00.000Z\" #> [123] \"1988-08-16T00:00:00.000Z\" \"1988-11-16T00:00:00.000Z\" #> [125] \"1989-02-16T00:00:00.000Z\" \"1989-05-16T00:00:00.000Z\" #> [127] \"1989-08-16T00:00:00.000Z\" \"1989-11-16T00:00:00.000Z\" #> [129] \"1990-02-16T00:00:00.000Z\" \"1990-05-16T00:00:00.000Z\" #> [131] \"1990-08-16T00:00:00.000Z\" \"1990-11-16T00:00:00.000Z\" #> [133] \"1991-02-16T00:00:00.000Z\" \"1991-05-16T00:00:00.000Z\" #> [135] \"1991-08-16T00:00:00.000Z\" \"1991-11-16T00:00:00.000Z\" #> [137] \"1992-02-16T00:00:00.000Z\" \"1992-05-16T00:00:00.000Z\" #> [139] \"1992-08-16T00:00:00.000Z\" \"1992-11-16T00:00:00.000Z\" #> [141] \"1993-02-16T00:00:00.000Z\" \"1993-05-16T00:00:00.000Z\" #> [143] \"1993-08-16T00:00:00.000Z\" \"1993-11-16T00:00:00.000Z\" #> [145] \"1994-02-16T00:00:00.000Z\" \"1994-05-16T00:00:00.000Z\" #> [147] \"1994-08-16T00:00:00.000Z\" \"1994-11-16T00:00:00.000Z\" #> [149] \"1995-02-16T00:00:00.000Z\" \"1995-05-16T00:00:00.000Z\" #> [151] \"1995-08-16T00:00:00.000Z\" \"1995-11-16T00:00:00.000Z\" #> [153] \"1996-02-16T00:00:00.000Z\" \"1996-05-16T00:00:00.000Z\" #> [155] \"1996-08-16T00:00:00.000Z\" \"1996-11-16T00:00:00.000Z\" #> [157] \"1997-02-16T00:00:00.000Z\" \"1997-05-16T00:00:00.000Z\" #> [159] \"1997-08-16T00:00:00.000Z\" \"1997-11-16T00:00:00.000Z\" #> [161] \"1998-02-16T00:00:00.000Z\" \"1998-05-16T00:00:00.000Z\" #> [163] \"1998-08-16T00:00:00.000Z\" \"1998-11-16T00:00:00.000Z\" #> [165] \"1999-02-16T00:00:00.000Z\" \"1999-05-16T00:00:00.000Z\" #> [167] \"1999-08-16T00:00:00.000Z\" \"1999-11-16T00:00:00.000Z\" #> [169] \"2000-02-16T00:00:00.000Z\" \"2000-05-16T00:00:00.000Z\" #> [171] \"2000-08-16T00:00:00.000Z\" \"2000-11-16T00:00:00.000Z\" #> [173] \"2001-02-16T00:00:00.000Z\" \"2001-05-16T00:00:00.000Z\" #> [175] \"2001-08-16T00:00:00.000Z\" \"2001-11-16T00:00:00.000Z\" #> [177] \"2002-02-16T00:00:00.000Z\" \"2002-05-16T00:00:00.000Z\" #> [179] \"2002-08-16T00:00:00.000Z\" \"2002-11-16T00:00:00.000Z\" #> [181] \"2003-02-16T00:00:00.000Z\" \"2003-05-16T00:00:00.000Z\" #> [183] \"2003-08-16T00:00:00.000Z\" \"2003-11-16T00:00:00.000Z\" #> [185] \"2004-02-16T00:00:00.000Z\" \"2004-05-16T00:00:00.000Z\" #> [187] \"2004-08-16T00:00:00.000Z\" \"2004-11-16T00:00:00.000Z\" #> [189] \"2005-02-16T00:00:00.000Z\" \"2005-05-16T00:00:00.000Z\" #> [191] \"2005-08-16T00:00:00.000Z\" \"2005-11-16T00:00:00.000Z\" #> [193] \"2006-02-16T00:00:00.000Z\" \"2006-05-16T00:00:00.000Z\" #> [195] \"2006-08-16T00:00:00.000Z\" \"2006-11-16T00:00:00.000Z\" #> [197] \"2007-02-16T00:00:00.000Z\" \"2007-05-16T00:00:00.000Z\" #> [199] \"2007-08-16T00:00:00.000Z\" \"2007-11-16T00:00:00.000Z\" #> [201] \"2008-02-16T00:00:00.000Z\" \"2008-05-16T00:00:00.000Z\" #> [203] \"2008-08-16T00:00:00.000Z\" \"2008-11-16T00:00:00.000Z\" #> [205] \"2009-02-16T00:00:00.000Z\" \"2009-05-16T00:00:00.000Z\" #> [207] \"2009-08-16T00:00:00.000Z\" \"2009-11-16T00:00:00.000Z\" #> [209] \"2010-02-16T00:00:00.000Z\" \"2010-05-16T00:00:00.000Z\" #> [211] \"2010-08-16T00:00:00.000Z\" \"2010-11-16T00:00:00.000Z\" #> [213] \"2011-02-16T00:00:00.000Z\" \"2011-05-16T00:00:00.000Z\" #> [215] \"2011-08-16T00:00:00.000Z\" \"2011-11-16T00:00:00.000Z\" #> [217] \"2012-02-16T00:00:00.000Z\" \"2012-05-16T00:00:00.000Z\" #> [219] \"2012-08-16T00:00:00.000Z\" \"2012-11-16T00:00:00.000Z\" #> [221] \"2013-02-16T00:00:00.000Z\" \"2013-05-16T00:00:00.000Z\" #> [223] \"2013-08-16T00:00:00.000Z\" \"2013-11-16T00:00:00.000Z\" #> [225] \"2014-02-16T00:00:00.000Z\" \"2014-05-16T00:00:00.000Z\" #> [227] \"2014-08-16T00:00:00.000Z\" \"2014-11-16T00:00:00.000Z\" #> [229] \"2015-02-16T00:00:00.000Z\" \"2015-05-16T00:00:00.000Z\" #> [231] \"2015-08-16T00:00:00.000Z\" \"2015-11-16T00:00:00.000Z\" #> [233] \"2016-02-16T00:00:00.000Z\" \"2016-05-16T00:00:00.000Z\" #> [235] \"2016-08-16T00:00:00.000Z\" \"2016-11-16T00:00:00.000Z\" #> attr(,\"type\") #> temporal_coefficents #>  #> $Emodnetbio__cal_fin_19582016_L1_err #>   [1] \"1958-02-16T00:00:00.000Z\" \"1958-05-16T00:00:00.000Z\" #>   [3] \"1958-08-16T00:00:00.000Z\" \"1958-11-16T00:00:00.000Z\" #>   [5] \"1959-02-16T00:00:00.000Z\" \"1959-05-16T00:00:00.000Z\" #>   [7] \"1959-08-16T00:00:00.000Z\" \"1959-11-16T00:00:00.000Z\" #>   [9] \"1960-02-16T00:00:00.000Z\" \"1960-05-16T00:00:00.000Z\" #>  [11] \"1960-08-16T00:00:00.000Z\" \"1960-11-16T00:00:00.000Z\" #>  [13] \"1961-02-16T00:00:00.000Z\" \"1961-05-16T00:00:00.000Z\" #>  [15] \"1961-08-16T00:00:00.000Z\" \"1961-11-16T00:00:00.000Z\" #>  [17] \"1962-02-16T00:00:00.000Z\" \"1962-05-16T00:00:00.000Z\" #>  [19] \"1962-08-16T00:00:00.000Z\" \"1962-11-16T00:00:00.000Z\" #>  [21] \"1963-02-16T00:00:00.000Z\" \"1963-05-16T00:00:00.000Z\" #>  [23] \"1963-08-16T00:00:00.000Z\" \"1963-11-16T00:00:00.000Z\" #>  [25] \"1964-02-16T00:00:00.000Z\" \"1964-05-16T00:00:00.000Z\" #>  [27] \"1964-08-16T00:00:00.000Z\" \"1964-11-16T00:00:00.000Z\" #>  [29] \"1965-02-16T00:00:00.000Z\" \"1965-05-16T00:00:00.000Z\" #>  [31] \"1965-08-16T00:00:00.000Z\" \"1965-11-16T00:00:00.000Z\" #>  [33] \"1966-02-16T00:00:00.000Z\" \"1966-05-16T00:00:00.000Z\" #>  [35] \"1966-08-16T00:00:00.000Z\" \"1966-11-16T00:00:00.000Z\" #>  [37] \"1967-02-16T00:00:00.000Z\" \"1967-05-16T00:00:00.000Z\" #>  [39] \"1967-08-16T00:00:00.000Z\" \"1967-11-16T00:00:00.000Z\" #>  [41] \"1968-02-16T00:00:00.000Z\" \"1968-05-16T00:00:00.000Z\" #>  [43] \"1968-08-16T00:00:00.000Z\" \"1968-11-16T00:00:00.000Z\" #>  [45] \"1969-02-16T00:00:00.000Z\" \"1969-05-16T00:00:00.000Z\" #>  [47] \"1969-08-16T00:00:00.000Z\" \"1969-11-16T00:00:00.000Z\" #>  [49] \"1970-02-16T00:00:00.000Z\" \"1970-05-16T00:00:00.000Z\" #>  [51] \"1970-08-16T00:00:00.000Z\" \"1970-11-16T00:00:00.000Z\" #>  [53] \"1971-02-16T00:00:00.000Z\" \"1971-05-16T00:00:00.000Z\" #>  [55] \"1971-08-16T00:00:00.000Z\" \"1971-11-16T00:00:00.000Z\" #>  [57] \"1972-02-16T00:00:00.000Z\" \"1972-05-16T00:00:00.000Z\" #>  [59] \"1972-08-16T00:00:00.000Z\" \"1972-11-16T00:00:00.000Z\" #>  [61] \"1973-02-16T00:00:00.000Z\" \"1973-05-16T00:00:00.000Z\" #>  [63] \"1973-08-16T00:00:00.000Z\" \"1973-11-16T00:00:00.000Z\" #>  [65] \"1974-02-16T00:00:00.000Z\" \"1974-05-16T00:00:00.000Z\" #>  [67] \"1974-08-16T00:00:00.000Z\" \"1974-11-16T00:00:00.000Z\" #>  [69] \"1975-02-16T00:00:00.000Z\" \"1975-05-16T00:00:00.000Z\" #>  [71] \"1975-08-16T00:00:00.000Z\" \"1975-11-16T00:00:00.000Z\" #>  [73] \"1976-02-16T00:00:00.000Z\" \"1976-05-16T00:00:00.000Z\" #>  [75] \"1976-08-16T00:00:00.000Z\" \"1976-11-16T00:00:00.000Z\" #>  [77] \"1977-02-16T00:00:00.000Z\" \"1977-05-16T00:00:00.000Z\" #>  [79] \"1977-08-16T00:00:00.000Z\" \"1977-11-16T00:00:00.000Z\" #>  [81] \"1978-02-16T00:00:00.000Z\" \"1978-05-16T00:00:00.000Z\" #>  [83] \"1978-08-16T00:00:00.000Z\" \"1978-11-16T00:00:00.000Z\" #>  [85] \"1979-02-16T00:00:00.000Z\" \"1979-05-16T00:00:00.000Z\" #>  [87] \"1979-08-16T00:00:00.000Z\" \"1979-11-16T00:00:00.000Z\" #>  [89] \"1980-02-16T00:00:00.000Z\" \"1980-05-16T00:00:00.000Z\" #>  [91] \"1980-08-16T00:00:00.000Z\" \"1980-11-16T00:00:00.000Z\" #>  [93] \"1981-02-16T00:00:00.000Z\" \"1981-05-16T00:00:00.000Z\" #>  [95] \"1981-08-16T00:00:00.000Z\" \"1981-11-16T00:00:00.000Z\" #>  [97] \"1982-02-16T00:00:00.000Z\" \"1982-05-16T00:00:00.000Z\" #>  [99] \"1982-08-16T00:00:00.000Z\" \"1982-11-16T00:00:00.000Z\" #> [101] \"1983-02-16T00:00:00.000Z\" \"1983-05-16T00:00:00.000Z\" #> [103] \"1983-08-16T00:00:00.000Z\" \"1983-11-16T00:00:00.000Z\" #> [105] \"1984-02-16T00:00:00.000Z\" \"1984-05-16T00:00:00.000Z\" #> [107] \"1984-08-16T00:00:00.000Z\" \"1984-11-16T00:00:00.000Z\" #> [109] \"1985-02-16T00:00:00.000Z\" \"1985-05-16T00:00:00.000Z\" #> [111] \"1985-08-16T00:00:00.000Z\" \"1985-11-16T00:00:00.000Z\" #> [113] \"1986-02-16T00:00:00.000Z\" \"1986-05-16T00:00:00.000Z\" #> [115] \"1986-08-16T00:00:00.000Z\" \"1986-11-16T00:00:00.000Z\" #> [117] \"1987-02-16T00:00:00.000Z\" \"1987-05-16T00:00:00.000Z\" #> [119] \"1987-08-16T00:00:00.000Z\" \"1987-11-16T00:00:00.000Z\" #> [121] \"1988-02-16T00:00:00.000Z\" \"1988-05-16T00:00:00.000Z\" #> [123] \"1988-08-16T00:00:00.000Z\" \"1988-11-16T00:00:00.000Z\" #> [125] \"1989-02-16T00:00:00.000Z\" \"1989-05-16T00:00:00.000Z\" #> [127] \"1989-08-16T00:00:00.000Z\" \"1989-11-16T00:00:00.000Z\" #> [129] \"1990-02-16T00:00:00.000Z\" \"1990-05-16T00:00:00.000Z\" #> [131] \"1990-08-16T00:00:00.000Z\" \"1990-11-16T00:00:00.000Z\" #> [133] \"1991-02-16T00:00:00.000Z\" \"1991-05-16T00:00:00.000Z\" #> [135] \"1991-08-16T00:00:00.000Z\" \"1991-11-16T00:00:00.000Z\" #> [137] \"1992-02-16T00:00:00.000Z\" \"1992-05-16T00:00:00.000Z\" #> [139] \"1992-08-16T00:00:00.000Z\" \"1992-11-16T00:00:00.000Z\" #> [141] \"1993-02-16T00:00:00.000Z\" \"1993-05-16T00:00:00.000Z\" #> [143] \"1993-08-16T00:00:00.000Z\" \"1993-11-16T00:00:00.000Z\" #> [145] \"1994-02-16T00:00:00.000Z\" \"1994-05-16T00:00:00.000Z\" #> [147] \"1994-08-16T00:00:00.000Z\" \"1994-11-16T00:00:00.000Z\" #> [149] \"1995-02-16T00:00:00.000Z\" \"1995-05-16T00:00:00.000Z\" #> [151] \"1995-08-16T00:00:00.000Z\" \"1995-11-16T00:00:00.000Z\" #> [153] \"1996-02-16T00:00:00.000Z\" \"1996-05-16T00:00:00.000Z\" #> [155] \"1996-08-16T00:00:00.000Z\" \"1996-11-16T00:00:00.000Z\" #> [157] \"1997-02-16T00:00:00.000Z\" \"1997-05-16T00:00:00.000Z\" #> [159] \"1997-08-16T00:00:00.000Z\" \"1997-11-16T00:00:00.000Z\" #> [161] \"1998-02-16T00:00:00.000Z\" \"1998-05-16T00:00:00.000Z\" #> [163] \"1998-08-16T00:00:00.000Z\" \"1998-11-16T00:00:00.000Z\" #> [165] \"1999-02-16T00:00:00.000Z\" \"1999-05-16T00:00:00.000Z\" #> [167] \"1999-08-16T00:00:00.000Z\" \"1999-11-16T00:00:00.000Z\" #> [169] \"2000-02-16T00:00:00.000Z\" \"2000-05-16T00:00:00.000Z\" #> [171] \"2000-08-16T00:00:00.000Z\" \"2000-11-16T00:00:00.000Z\" #> [173] \"2001-02-16T00:00:00.000Z\" \"2001-05-16T00:00:00.000Z\" #> [175] \"2001-08-16T00:00:00.000Z\" \"2001-11-16T00:00:00.000Z\" #> [177] \"2002-02-16T00:00:00.000Z\" \"2002-05-16T00:00:00.000Z\" #> [179] \"2002-08-16T00:00:00.000Z\" \"2002-11-16T00:00:00.000Z\" #> [181] \"2003-02-16T00:00:00.000Z\" \"2003-05-16T00:00:00.000Z\" #> [183] \"2003-08-16T00:00:00.000Z\" \"2003-11-16T00:00:00.000Z\" #> [185] \"2004-02-16T00:00:00.000Z\" \"2004-05-16T00:00:00.000Z\" #> [187] \"2004-08-16T00:00:00.000Z\" \"2004-11-16T00:00:00.000Z\" #> [189] \"2005-02-16T00:00:00.000Z\" \"2005-05-16T00:00:00.000Z\" #> [191] \"2005-08-16T00:00:00.000Z\" \"2005-11-16T00:00:00.000Z\" #> [193] \"2006-02-16T00:00:00.000Z\" \"2006-05-16T00:00:00.000Z\" #> [195] \"2006-08-16T00:00:00.000Z\" \"2006-11-16T00:00:00.000Z\" #> [197] \"2007-02-16T00:00:00.000Z\" \"2007-05-16T00:00:00.000Z\" #> [199] \"2007-08-16T00:00:00.000Z\" \"2007-11-16T00:00:00.000Z\" #> [201] \"2008-02-16T00:00:00.000Z\" \"2008-05-16T00:00:00.000Z\" #> [203] \"2008-08-16T00:00:00.000Z\" \"2008-11-16T00:00:00.000Z\" #> [205] \"2009-02-16T00:00:00.000Z\" \"2009-05-16T00:00:00.000Z\" #> [207] \"2009-08-16T00:00:00.000Z\" \"2009-11-16T00:00:00.000Z\" #> [209] \"2010-02-16T00:00:00.000Z\" \"2010-05-16T00:00:00.000Z\" #> [211] \"2010-08-16T00:00:00.000Z\" \"2010-11-16T00:00:00.000Z\" #> [213] \"2011-02-16T00:00:00.000Z\" \"2011-05-16T00:00:00.000Z\" #> [215] \"2011-08-16T00:00:00.000Z\" \"2011-11-16T00:00:00.000Z\" #> [217] \"2012-02-16T00:00:00.000Z\" \"2012-05-16T00:00:00.000Z\" #> [219] \"2012-08-16T00:00:00.000Z\" \"2012-11-16T00:00:00.000Z\" #> [221] \"2013-02-16T00:00:00.000Z\" \"2013-05-16T00:00:00.000Z\" #> [223] \"2013-08-16T00:00:00.000Z\" \"2013-11-16T00:00:00.000Z\" #> [225] \"2014-02-16T00:00:00.000Z\" \"2014-05-16T00:00:00.000Z\" #> [227] \"2014-08-16T00:00:00.000Z\" \"2014-11-16T00:00:00.000Z\" #> [229] \"2015-02-16T00:00:00.000Z\" \"2015-05-16T00:00:00.000Z\" #> [231] \"2015-08-16T00:00:00.000Z\" \"2015-11-16T00:00:00.000Z\" #> [233] \"2016-02-16T00:00:00.000Z\" \"2016-05-16T00:00:00.000Z\" #> [235] \"2016-08-16T00:00:00.000Z\" \"2016-11-16T00:00:00.000Z\" #> attr(,\"type\") #> temporal_coefficents summaries <- emdn_get_coverage_summaries(wcs,                                          coverage_ids = c(                                              \"Emodnetbio__ratio_large_to_small_19582016_L1_err\",                                              \"Emodnetbio__cal_fin_19582016_L1_err\"                                           ) )  summaries #> [[1]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     attrs: list #>     BoundingBox: list #>     clone: function (deep = FALSE)  #>     CoverageId: Emodnetbio__ratio_large_to_small_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     ERROR: function (text)  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     INFO: function (text)  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[2]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     attrs: list #>     BoundingBox: list #>     clone: function (deep = FALSE)  #>     CoverageId: Emodnetbio__cal_fin_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     ERROR: function (text)  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     INFO: function (text)  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\") emdn_get_coverage_summaries_all(wcs)"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"getting-metadata-from-a-wcscoveragesummary-object-","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata","what":"Getting metadata from a <WCSCoverageSummary> object.","title":"Getting metadata about Services & Coverages","text":"obtained <WCSCoverageSummary> object coverage interested , can extract number metadata usable forms. Let’s work single <WCSCoverageSummary> object returned previous step coverage \"Emodnetbio__ratio_large_to_small_19582016_L1_err\".","code":"summary <- summaries[[1]]"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"emdn_get_bbox","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"emdn_get_bbox()","title":"Getting metadata about Services & Coverages","text":"Get bounding box (geographic extent) coverage. Coordinates given Coordinate Reference System coverage.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-bbox","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get bbox","title":"Getting metadata about Services & Coverages","text":"Get bounding box (geographic extent) coverage. Coordinates given Coordinate Reference System coverage.","code":"emdn_get_bbox(summary) #>   xmin   ymin   xmax   ymax  #> -75.05  34.95  20.05  75.05"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-wgs84-bbox","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get WGS84 bbox","title":"Getting metadata about Services & Coverages","text":"Get bounding box (geographic extent) coverage World Geodetic System 1984 (WGS84) Coordinate Reference System (EPSG:4326).","code":"emdn_get_WGS84bbox(summary) #>   xmin   ymin   xmax   ymax  #> -75.05  34.95  20.05  75.05"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-the-nil-value-of-a-coverage","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get the nil value of a coverage","title":"Getting metadata about Services & Coverages","text":"Get value representing nil values coverage.","code":"emdn_get_nil_value(summary) #> [1] 9.96921e+36"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-coverage-band-names","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get coverage band names","title":"Getting metadata about Services & Coverages","text":"Get band names coverage.","code":"emdn_get_band_name(summary) #> [1] \"Relative error\""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-band-units-of-measurement","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get band units of measurement","title":"Getting metadata about Services & Coverages","text":"Get units measurement data contained bands values coverage.","code":"emdn_get_uom(summary) #> [1] \"W.m-2.Sr-1\""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-range-of-band-values","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get range of band values","title":"Getting metadata about Services & Coverages","text":"Get range values data contained bands coverage.","code":"emdn_get_constraint(summary) #> [1] -3.402823e+38  3.402823e+38"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-coverage-grid-size","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get coverage grid size","title":"Getting metadata about Services & Coverages","text":"Get grid size coverage.","code":"emdn_get_grid_size(summary) #> ncol nrow  #>  951  401"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-coverage-resolution","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get coverage resolution","title":"Getting metadata about Services & Coverages","text":"Get resolution coverage.","code":"emdn_get_resolution(summary) #>   x   y  #> 0.1 0.1  #> attr(,\"uom\") #> [1] \"Deg\" \"Deg\""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-coverage-grid-function","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get coverage grid function","title":"Getting metadata about Services & Coverages","text":"Get grid function coverage.","code":"emdn_get_coverage_function(summary) #> $sequence_rule #> [1] \"Linear\" #>  #> $start_point #> [1] 0 0 #>  #> $axis_order #> [1] \"+2\" \"+1\""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-the-extent-of-the-temporal-dimension","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get the extent of the temporal dimension","title":"Getting metadata about Services & Coverages","text":"Get temporal extent coverage.","code":"emdn_get_temporal_extent(summary) #> [1] \"1958-02-16T00:00:00.000Z\" \"2016-11-16T00:00:00.000Z\""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-the-extent-of-the-vertical-dimension","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get the extent of the vertical dimension","title":"Getting metadata about Services & Coverages","text":"Get vertical (elevation) extent coverage.","code":"emdn_get_vertical_extent(summary) #> [1] NA"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-information-about-coverage-dimensions-in-various-formats","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get information about coverage dimensions in various formats","title":"Getting metadata about Services & Coverages","text":"Get information dimensions coverage various formats. Information includes dimension label, type, unit range (tibble format).","code":"emdn_get_dimensions_info(summary) #> lat(deg):geographic; long(deg):geographic; time(s):temporal emdn_get_dimensions_info(summary, format = \"list\") #> $dim_1 #> $dim_1$label #> [1] \"Lat\" #>  #> $dim_1$uom #> [1] \"Deg\" #>  #> $dim_1$type #> [1] \"geographic\" #>  #>  #> $dim_2 #> $dim_2$label #> [1] \"Long\" #>  #> $dim_2$uom #> [1] \"Deg\" #>  #> $dim_2$type #> [1] \"geographic\" #>  #>  #> $dim_3 #> $dim_3$label #> [1] \"time\" #>  #> $dim_3$uom #> [1] \"s\" #>  #> $dim_3$type #> [1] \"temporal\" emdn_get_dimensions_info(summary, format = \"tibble\")"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-dimension-names","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get dimension names","title":"Getting metadata about Services & Coverages","text":"Get coverage dimension names (labels) units.","code":"emdn_get_dimensions_names(summary) #> [1] \"Lat (Deg), Long (Deg), time (s)\""},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-number-of-dimensions","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get number of dimensions","title":"Getting metadata about Services & Coverages","text":"Get number coverage dimensions.","code":"emdn_get_dimensions_n(summary) #> [1] 3"},{"path":"https://emodnet.github.io/EMODnetWCS/articles/info.html","id":"get-dimensions-types","dir":"Articles","previous_headings":"Downloading & extracting compiled metadata on services and coverages. > Getting individual coverage level metadata > Getting metadata from a <WCSCoverageSummary> object.","what":"Get dimensions types","title":"Getting metadata about Services & Coverages","text":"Get dimensions types coverage.","code":"emdn_get_dimension_types(summary) #> [1] \"geographic\" \"geographic\" \"temporal\""},{"path":"https://emodnet.github.io/EMODnetWCS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anna Krystalli. Author. Salvador Fernández-Bejarano. Contributor, maintainer. Thomas J Webb. Contributor. European Marine Observation Data Network (EMODnet) Biology project European Commission's Directorate - General Maritime Affairs Fisheries (DG MARE). Copyright holder. VLIZ (VLAAMS INSTITUUT VOOR DE ZEE). Funder.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krystalli (2022). EMODnetWCS: Access EMODnet Web Coverage Service data R. https://github.com/EMODnet/EMODnetWCS, https://emodnet.github.io/EMODnetWCS/.","code":"@Manual{,   title = {EMODnetWCS: Access EMODnet Web Coverage Service data through R},   author = {Anna Krystalli},   year = {2022},   note = {https://github.com/EMODnet/EMODnetWCS, https://emodnet.github.io/EMODnetWCS/}, }"},{"path":"https://emodnet.github.io/EMODnetWCS/index.html","id":"emodnetwcs","dir":"","previous_headings":"","what":"Access EMODnet Web Coverage Service data through R","title":"Access EMODnet Web Coverage Service data through R","text":"goal EMODnetWCS allow interrogation access EMODnet geographic raster data R though EMODnet Web Coverage Services. See available Services. package developed Sheffield University part EMODnet Biology WP4. Web Coverage services (WCS) standard created OGC refers receiving geospatial information ‘coverages’: digital geospatial information representing space-varying phenomena. One can think Web Feature Service (WFS) raster data. gets ‘source code’ map, case raw vectors raw imagery. important distinction must made WCS Web Map Service (WMS). similar, can return similar formats, WCS able return information, including valuable metadata formats. additionally allows precise queries, potentially multi-dimensional backend formats.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access EMODnet Web Coverage Service data through R","text":"can install development version EMODnetWCS GitHub : Load library","code":"# install.packages(\"remotes\") remotes::install_github(\"EMODnet/EMODnetWCS\") library(EMODnetWCS) #> Loading required package: ows4R #> Loading required package: geometa #> Loading ISO 19139 XML schemas... #> Loading ISO 19115 codelists... #> Loading IANA mime types... #> No encoding supplied: defaulting to UTF-8. #> Loading required package: keyring"},{"path":"https://emodnet.github.io/EMODnetWCS/index.html","id":"available-services","dir":"","previous_headings":"","what":"Available services","title":"Access EMODnet Web Coverage Service data through R","text":"available services contained tibble returned emdn_wcs(). explore available services Rstudio use:","code":"View(emdn_wcs())"},{"path":"https://emodnet.github.io/EMODnetWCS/index.html","id":"create-service-client","dir":"","previous_headings":"","what":"Create Service Client","title":"Access EMODnet Web Coverage Service data through R","text":"Create new WCS Client. Specify service using service argument.","code":"wcs <- emdn_init_wcs_client(service = \"biology\") #> ✔ WCS client created succesfully #> ℹ Service: <https://geo.vliz.be/geoserver/Emodnetbio/wcs> #> ℹ Service: \"2.0.1\"  wcs$getUrl() #> [1] \"https://geo.vliz.be/geoserver/Emodnetbio/wcs\""},{"path":"https://emodnet.github.io/EMODnetWCS/index.html","id":"get-information-about-a-wcs-service","dir":"","previous_headings":"","what":"Get Information about a WCS service","title":"Access EMODnet Web Coverage Service data through R","text":"Get information WCS service supplying wcs object emdn_get_wcs_info Info can also extracted using service name instead wcs object. Note minimize number requests sent webservices, functions use memoise cache results inside active R session. clear cache, re-start R run memoise::forget(emdn_get_wcs_info)/memoise::forget(emdn_get_coverage_info)","code":"emdn_get_wcs_info(wcs) #> Loading required package: sf #> Linking to GEOS 3.9.1, GDAL 3.4.0, PROJ 8.1.1; sf_use_s2() is TRUE #> $data_source #> [1] \"emodnet_wcs\" #>  #> $service_name #> [1] \"biology\" #>  #> $service_url #> [1] \"https://geo.vliz.be/geoserver/Emodnetbio/wcs\" #>  #> $service_title #> [1] \"EMODnet Biology\" #>  #> $service_abstract #> [1] \"The EMODnet Biology products include a set of gridded map layers showing the average abundance of marine species for different time windows (seasonal, annual) using geospatial modelling. The spatial modelling tool used to calculate the gridded abundance maps is based on DIVA. DIVA (Data-Interpolating Variational Analysis) is a tool to create gridded data sets from discrete point measurements of the ocean. For the representation of time dynamics, it was decided to produce gridded maps for sliding time windows, e.g. combining one or more years  in one gridded map, so that relatively smooth animated GIF presentations can be produced that show the essential change over time. EMODnet Biology’s data products include the Operational Ocean Products and Services (OOPS), harvested by ICES.\" #>  #> $service_access_constraits #> [1] \"NONE\" #>  #> $service_fees #> [1] \"NONE\" #>  #> $service_type #> [1] \"urn:ogc:service:wcs\" #>  #> $coverage_details #> # A tibble: 10 × 9 #>    coverage_id        dim_n dim_n…¹ extent crs   wgs84…² tempo…³ verti…⁴ subtype #>    <chr>              <int> <chr>   <chr>  <chr> <chr>   <chr>   <chr>   <chr>   #>  1 Emodnetbio__ratio…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  2 Emodnetbio__aca_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  3 Emodnetbio__cal_f…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  4 Emodnetbio__cal_h…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  5 Emodnetbio__met_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  6 Emodnetbio__oit_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  7 Emodnetbio__tem_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  8 Emodnetbio__chli_…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  9 Emodnetbio__tot_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #> 10 Emodnetbio__tot_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #> # … with abbreviated variable names ¹​dim_names, ²​wgs84_bbox, ³​temporal_extent, #> #   ⁴​vertical_extent emdn_get_wcs_info(service = \"bathymetry\") #> ✔ WCS client created succesfully #> ℹ Service: <https://ows.emodnet-bathymetry.eu/wcs> #> ℹ Service: \"2.0.1\" #> $data_source #> [1] \"emodnet_wcs\" #>  #> $service_name #> [1] \"bathymetry\" #>  #> $service_url #> [1] \"https://ows.emodnet-bathymetry.eu/wcs\" #>  #> $service_title #> [1] \"EMODnet Bathymetry WCS\" #>  #> $service_abstract #> [1] \"\" #>  #> $service_access_constraits #> [1] \"NONE\" #>  #> $service_fees #> [1] \"NONE\" #>  #> $service_type #> [1] \"urn:ogc:service:wcs\" #>  #> $coverage_details #> # A tibble: 6 × 9 #>   coverage_id         dim_n dim_n…¹ extent crs   wgs84…² tempo…³ verti…⁴ subtype #>   <chr>               <int> <chr>   <chr>  <chr> <chr>   <chr>   <chr>   <chr>   #> 1 emodnet__mean           2 lat(de… -36, … EPSG… -36, 1… NA      NA      Rectif… #> 2 emodnet__mean_2016      2 lat(de… -36, … EPSG… -36, 2… NA      NA      Rectif… #> 3 emodnet__mean_2018      2 lat(de… -36, … EPSG… -36, 1… NA      NA      Rectif… #> 4 emodnet__mean_atla…     2 lat(de… -36, … EPSG… -36, 1… NA      NA      Rectif… #> 5 emodnet__mean_mult…     2 lat(de… -36, … EPSG… -36, 1… NA      NA      Rectif… #> 6 emodnet__mean_rain…     2 lat(de… -36, … EPSG… -36, 1… NA      NA      Rectif… #> # … with abbreviated variable names ¹​dim_names, ²​wgs84_bbox, ³​temporal_extent, #> #   ⁴​vertical_extent emdn_get_coverage_info(service = \"human_activities\",                                coverage_ids = \"emodnet__2017_01_st_00\") #> ✔ WCS client created succesfully #> ℹ Service: <https://ows.emodnet-humanactivities.eu/wcs> #> ℹ Service: \"2.0.1\" #> # A tibble: 1 × 20 #>   data_s…¹ servi…² servi…³ cover…⁴ band_…⁵ band_…⁶ const…⁷ nil_v…⁸ dim_n dim_n…⁹ #>   <chr>    <chr>   <chr>   <chr>   <chr>   <chr>   <chr>     <dbl> <int> <chr>   #> 1 emodnet… https:… human_… emodne… GRAY_I… W.m-2.… -3.402…   -9999     2 x(m):g… #> # … with 10 more variables: grid_size <chr>, resolution <chr>, extent <chr>, #> #   crs <chr>, wgs84_extent <chr>, temporal_extent <chr>, #> #   vertical_extent <chr>, subtype <chr>, fn_seq_rule <chr>, #> #   fn_start_point <chr>, and abbreviated variable names ¹​data_source, #> #   ²​service_name, ³​service_url, ⁴​coverage_id, ⁵​band_description, ⁶​band_uom, #> #   ⁷​constraint, ⁸​nil_value, ⁹​dim_names"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coverage metadata from a <WCSCoverageSummary> object. — emdn_get_bbox","title":"Get coverage metadata from a <WCSCoverageSummary> object. — emdn_get_bbox","text":"Get coverage metadata <WCSCoverageSummary> object.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coverage metadata from a <WCSCoverageSummary> object. — emdn_get_bbox","text":"","code":"emdn_get_bbox(summary)  emdn_get_WGS84bbox(summary)  emdn_get_nil_value(summary)  emdn_get_band_name(summary)  emdn_get_uom(summary)  emdn_get_constraint(summary)  emdn_get_grid_size(summary)  emdn_get_resolution(summary)  emdn_get_coverage_function(summary)  emdn_get_temporal_extent(summary)  emdn_get_vertical_extent(summary)  emdn_get_dimensions_info(   summary,   format = c(\"character\", \"list\", \"tibble\"),   include_coeffs = FALSE )  emdn_get_dimensions_names(summary)  emdn_get_dimensions_n(summary)  emdn_get_dimension_types(summary)"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get coverage metadata from a <WCSCoverageSummary> object. — emdn_get_bbox","text":"summary <WCSCoverageSummary> object. format character string. Coverage dimension info output format. One \"character\" (default), \"list\" \"tibble\". include_coeffs whether include vector temporal vertical dimension coefficients (applicable) coverage dimension info \"list\" output format. Defaults FALSE. Ignored formats.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get coverage metadata from a <WCSCoverageSummary> object. — emdn_get_bbox","text":"emdn_get_bbox: object class bbox length 4 expressing boundaries coverage extent/envelope. See sf::st_bbox() details. emdn_get_WGS84bbox: object class bbox length 4 expressing boundaries coverage extent/envelope. See sf::st_bbox() details. emdn_get_nil_value numeric scalar value representing nil values coverage. emdn_get_band_name character vector band names. emdn_get_uom character vector band units measurement. emdn_get_constraint numeric vector length 2 indicating min max data contained bands coverage. emdn_get_grid_size numeric vector length 2 giving spatial size grid cells (pixels) coverage grid (ncol x nrow) emdn_get_resolution numeric vector length 2 giving spatial resolution grid cells (size x dimension, size y dimension) coverage. attached attribute uom gives units measurement dimension. emdn_get_coverage_function list elements: sequence_rule, character string, function describing sequence rule, .e. relationship axes data coordinate system axes. starting_point numeric vector length 2, location origin data coordinate system. axis_order character vector length 2 specifying axis order direction mapping values onto grid, beginning starting point. example, \"+2 +1\" indicates value range ordered bottom left top right grid envelope - lowest highest x-axis direction first (+2), lowest highest y-axis direction (+1) starting_point. emdn_get_temporal_extent coverage temporal dimension, numeric vector length 2 giving min max values dimension. Otherwise, NA. emdn_get_vertical_extent coverage vertical dimension, numeric vector length 2 giving min max values dimension. Otherwise, NA. emdn_get_dimensions_info output depends format argument: character: (default) concatenated character string dimension information list: list dimension information tibble: tibble dimension information","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_bbox.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get coverage metadata from a <WCSCoverageSummary> object. — emdn_get_bbox","text":"emdn_get_bbox: Get bounding box (geographic extent) coverage. Coordinates given Coordinate Reference System coverage. emdn_get_WGS84bbox: Get bounding box (geographic extent) coverage World Geodetic System 1984 (WGS84) Coordinate Reference System (EPSG:4326). emdn_get_nil_value: Get value representing nil values coverage. emdn_get_band_name: Get band names coverage. emdn_get_uom: Get units measurement data contained bands values coverage. emdn_get_constraint: Get range values data contained bands coverage. emdn_get_grid_size: Get grid size coverage. emdn_get_resolution: Get resolution coverage. emdn_get_coverage_function: Get grid function coverage. emdn_get_temporal_extent: Get temporal extent coverage. emdn_get_vertical_extent: Get vertical (elevation) extent coverage. emdn_get_dimensions_info: Get information dimensions coverage various formats. Information includes dimension label, type, unit range (tibble format). emdn_get_dimensions_names: Get coverage dimension names (labels) units. emdn_get_dimensions_n: Get number coverage dimensions. emdn_get_dimension_types: Get dimensions types coverage.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get coverage metadata from a <WCSCoverageSummary> object. — emdn_get_bbox","text":"","code":"wcs <- emdn_init_wcs_client(service = \"biology\") #> ✔ WCS client created succesfully #> ℹ Service: <https://geo.vliz.be/geoserver/Emodnetbio/wcs> #> ℹ Service: \"2.0.1\" summaries <- emdn_get_coverage_summaries_all(wcs) summary <- summaries[[1]] # get bbox emdn_get_bbox(summary) #> Loading required package: sf #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE #>   xmin   ymin   xmax   ymax  #> -75.05  34.95  20.05  75.05  # get WGS84 bbox emdn_get_WGS84bbox(summary) #>   xmin   ymin   xmax   ymax  #> -75.05  34.95  20.05  75.05  # get the nil value of a coverage emdn_get_nil_value(summary) #> [1] 9.96921e+36 # get coverage band names emdn_get_band_name(summary) #> [1] \"Relative error\" # get band units of measurement emdn_get_uom(summary) #> [1] \"W.m-2.Sr-1\" # get range of band values emdn_get_constraint(summary) #> [1] -3.402823e+38  3.402823e+38 # get coverage grid size emdn_get_grid_size(summary) #> ncol nrow  #>  951  401  # get coverage resolution emdn_get_resolution(summary) #>   x   y  #> 0.1 0.1  #> attr(,\"uom\") #> [1] \"Deg\" \"Deg\" # get coverage grid function emdn_get_coverage_function(summary) #> $sequence_rule #> [1] \"Linear\" #>  #> $start_point #> [1] 0 0 #>  #> $axis_order #> [1] \"+2\" \"+1\" #>  # get the extent of the temporal dimension emdn_get_temporal_extent(summary) #> [1] \"1958-02-16T00:00:00.000Z\" \"2016-11-16T00:00:00.000Z\" # get the extent of the vertical dimension emdn_get_vertical_extent(summary) #> [1] NA # get information about coverage dimensions in various formats emdn_get_dimensions_info(summary) #> lat(deg):geographic; long(deg):geographic; time(s):temporal emdn_get_dimensions_info(summary, format = \"list\") #> $dim_1 #> $dim_1$label #> [1] \"Lat\" #>  #> $dim_1$uom #> [1] \"Deg\" #>  #> $dim_1$type #> [1] \"geographic\" #>  #>  #> $dim_2 #> $dim_2$label #> [1] \"Long\" #>  #> $dim_2$uom #> [1] \"Deg\" #>  #> $dim_2$type #> [1] \"geographic\" #>  #>  #> $dim_3 #> $dim_3$label #> [1] \"time\" #>  #> $dim_3$uom #> [1] \"s\" #>  #> $dim_3$type #> [1] \"temporal\" #>  #>  emdn_get_dimensions_info(summary, format = \"tibble\") #> # A tibble: 3 × 5 #>   dimension label uom   type       range                                         #>       <int> <chr> <chr> <chr>      <chr>                                         #> 1         1 lat   deg   geographic NA                                            #> 2         2 long  deg   geographic NA                                            #> 3         3 time  s     temporal   1958-02-16T00:00:00.000Z - 2016-11-16T00:00:… # get dimension names emdn_get_dimensions_names(summary) #> [1] \"Lat (Deg), Long (Deg), time (s)\" # get number of dimensions emdn_get_dimensions_n(summary) #> [1] 3 # get dimensions types emdn_get_dimension_types(summary) #> [1] \"geographic\" \"geographic\" \"temporal\""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a coverage from an EMODnet WCS Service — emdn_get_coverage","title":"Get a coverage from an EMODnet WCS Service — emdn_get_coverage","text":"Get coverage EMODnet WCS Service","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a coverage from an EMODnet WCS Service — emdn_get_coverage","text":"","code":"emdn_get_coverage(   wcs = NULL,   service = NULL,   coverage_id,   service_version = c(\"2.0.1\", \"2.1.0\", \"2.0.0\", \"1.1.1\", \"1.1.0\"),   logger = c(\"NONE\", \"INFO\", \"DEBUG\"),   bbox = NULL,   crs = NULL,   time = NULL,   elevation = NULL,   format = NULL,   rangesubset = NULL,   filename = NULL,   nil_values_as_na = FALSE )"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a coverage from an EMODnet WCS Service — emdn_get_coverage","text":"wcs WCSClient R6 object, created function emdn_init_wcs_client. service EMODnet OGC WCS service name. available services, see emdn_wcs(). coverage_id character string. Coverage ID. service_version WCS service version. Defaults \"2.0.1\". logger character string. Level logger: 'NONE' logger, 'INFO' get ows4R logs, 'DEBUG' internal logs (Curl details) bbox named numeric vector length 4, names xmin, ymin, xmax ymax. specifying bounding box. (extent) raster returned. crs CRS supplied bounding box. Leave NULL (default) coverage crs. time coverages include temporal dimension, vector temporal coefficients specifying time points coverage data returned. NULL (default), last time point returned. get list available temporal coefficients, see emdn_get_coverage_dim_coefs. single time point, SpatRaster returned. one time points, SpatRaster stack returned. elevation coverages include vertical dimension, vector vertical coefficients specifying elevation coverage data returned. NULL (default), last elevation returned. get list available vertical coefficients, see emdn_get_coverage_dim_coefs. single elevation, SpatRaster returned. one elevation, SpatRaster stack returned. format format file coverage written . rangesubset character vector band names subset. filename file name write . nil_values_as_na logical. raster nil values converted NA?","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a coverage from an EMODnet WCS Service — emdn_get_coverage","text":"object class terra::SpatRaster. function also writes coverage local file.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a coverage from an EMODnet WCS Service — emdn_get_coverage","text":"","code":"if (FALSE) { wcs <- emdn_init_wcs_client(service = \"biology\") coverage_id <- \"Emodnetbio__cal_fin_19582016_L1_err\" # Subset using a bounding box emdn_get_coverage(wcs,                          coverage_id = coverage_id,                          bbox = c(xmin = 0, ymin = 40,                                   xmax = 5, ymax = 45)) # Subset using a bounding box and specific timepoints emdn_get_coverage(wcs,                          coverage_id = coverage_id,                          bbox = c(xmin = 0, ymin = 40,                                   xmax = 5, ymax = 45),                          time = c(\"1963-11-16T00:00:00.000Z\",                                   \"1964-02-16T00:00:00.000Z\")) # Subset using a bounding box and a specific band emdn_get_coverage(wcs, coverage_id = coverage_id,                          bbox = c(xmin = 0, ymin = 40,                                   xmax = 5, ymax = 45),                                   rangesubset = \"Relative abundance\") }"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage_summaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata objects from a WCSClient object. — emdn_get_coverage_summaries","title":"Get metadata objects from a WCSClient object. — emdn_get_coverage_summaries","text":"Get metadata objects WCSClient object. <WCSCoverageSummary> particular can used extract metadata individual coverages.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage_summaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata objects from a WCSClient object. — emdn_get_coverage_summaries","text":"","code":"emdn_get_coverage_summaries(wcs, coverage_ids)  emdn_get_coverage_summaries_all(wcs)  emdn_get_coverage_ids(wcs)  emdn_has_dimension(wcs, coverage_ids, type = c(\"temporal\", \"vertical\"))  emdn_get_coverage_dim_coefs(   wcs,   coverage_ids,   type = c(\"temporal\", \"vertical\") )"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage_summaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata objects from a WCSClient object. — emdn_get_coverage_summaries","text":"wcs WCSClient R6 object, created function emdn_init_wcs_client. coverage_ids character vector coverage IDs. type coverage dimension type. One \"temporal\" \"vertical\".","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage_summaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata objects from a WCSClient object. — emdn_get_coverage_summaries","text":"emdn_get_coverage_summaries: returns list objects class <WCSCoverageSummary> coverage_id provided. emdn_get_coverage_summaries_all: returns list objects class <WCSCoverageSummary> coverage avalable service. emdn_get_coverage_ids returns character vector coverage ids. emdn_get_coverage_dim_coefs returns list containing vector coefficients coverage requested. list containing vector coefficients coverage requested.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage_summaries.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get metadata objects from a WCSClient object. — emdn_get_coverage_summaries","text":"emdn_get_coverage_summaries: Get summaries specific coverages. emdn_get_coverage_summaries_all: Get summaries available coverages service. emdn_get_coverage_ids: Get coverage IDs available coverages service. emdn_has_dimension: check whether coverage temporal vertical dimension. emdn_get_coverage_dim_coefs: Get temporal vertical coefficients coverage.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_coverage_summaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata objects from a WCSClient object. — emdn_get_coverage_summaries","text":"","code":"wcs <- emdn_init_wcs_client(service = \"biology\") #> ✔ WCS client created succesfully #> ℹ Service: <https://geo.vliz.be/geoserver/Emodnetbio/wcs> #> ℹ Service: \"2.0.1\" cov_ids <- emdn_get_coverage_ids(wcs) cov_ids #>  [1] \"Emodnetbio__ratio_large_to_small_19582016_L1_err\" #>  [2] \"Emodnetbio__aca_spp_19582016_L1\"                  #>  [3] \"Emodnetbio__cal_fin_19582016_L1_err\"              #>  [4] \"Emodnetbio__cal_hel_19582016_L1_err\"              #>  [5] \"Emodnetbio__met_luc_19582016_L1_err\"              #>  [6] \"Emodnetbio__oit_spp_19582016_L1_err\"              #>  [7] \"Emodnetbio__tem_lon_19582016_L1_err\"              #>  [8] \"Emodnetbio__chli_19582016_L1_err\"                 #>  [9] \"Emodnetbio__tot_lar_19582016_L1_err\"              #> [10] \"Emodnetbio__tot_sma_19582016_L1_err\"              emdn_has_dimension(wcs,                      cov_ids,                      type = \"temporal\") #> Emodnetbio__ratio_large_to_small_19582016_L1_err  #>                                             TRUE  #>                  Emodnetbio__aca_spp_19582016_L1  #>                                             TRUE  #>              Emodnetbio__cal_fin_19582016_L1_err  #>                                             TRUE  #>              Emodnetbio__cal_hel_19582016_L1_err  #>                                             TRUE  #>              Emodnetbio__met_luc_19582016_L1_err  #>                                             TRUE  #>              Emodnetbio__oit_spp_19582016_L1_err  #>                                             TRUE  #>              Emodnetbio__tem_lon_19582016_L1_err  #>                                             TRUE  #>                 Emodnetbio__chli_19582016_L1_err  #>                                             TRUE  #>              Emodnetbio__tot_lar_19582016_L1_err  #>                                             TRUE  #>              Emodnetbio__tot_sma_19582016_L1_err  #>                                             TRUE  emdn_has_dimension(wcs,                      cov_ids,                      type = \"vertical\") #> Emodnetbio__ratio_large_to_small_19582016_L1_err  #>                                            FALSE  #>                  Emodnetbio__aca_spp_19582016_L1  #>                                            FALSE  #>              Emodnetbio__cal_fin_19582016_L1_err  #>                                            FALSE  #>              Emodnetbio__cal_hel_19582016_L1_err  #>                                            FALSE  #>              Emodnetbio__met_luc_19582016_L1_err  #>                                            FALSE  #>              Emodnetbio__oit_spp_19582016_L1_err  #>                                            FALSE  #>              Emodnetbio__tem_lon_19582016_L1_err  #>                                            FALSE  #>                 Emodnetbio__chli_19582016_L1_err  #>                                            FALSE  #>              Emodnetbio__tot_lar_19582016_L1_err  #>                                            FALSE  #>              Emodnetbio__tot_sma_19582016_L1_err  #>                                            FALSE  emdn_get_coverage_summaries(wcs, cov_ids[1:2]) #> [[1]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__ratio_large_to_small_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[2]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__aca_spp_19582016_L1 #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  emdn_get_coverage_summaries_all(wcs) #> [[1]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__ratio_large_to_small_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[2]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__aca_spp_19582016_L1 #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[3]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__cal_fin_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[4]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__cal_hel_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[5]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__met_luc_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[6]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__oit_spp_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[7]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__tem_lon_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[8]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__chli_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[9]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__tot_lar_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  #> [[10]] #> <WCSCoverageSummary> #>   Inherits from: <OGCAbstractObject> #>   Public: #>     BoundingBox: list #>     CoverageId: Emodnetbio__tot_sma_19582016_L1_err #>     CoverageSubtype: RectifiedGridCoverage #>     CoverageSubtypeParent: NULL #>     ERROR: function (text)  #>     INFO: function (text)  #>     WARN: function (text)  #>     WGS84BoundingBox: list #>     attrs: list #>     clone: function (deep = FALSE)  #>     defaults: list #>     element: AbstractObject #>     encode: function (addNS = TRUE, geometa_validate = TRUE, geometa_inspire = FALSE,  #>     getBoundingBox: function ()  #>     getClass: function ()  #>     getClassName: function ()  #>     getCoverage: function (bbox = NULL, crs = NULL, time = NULL, elevation = NULL,  #>     getCoverageStack: function (time = NULL, elevation = NULL, bbox = NULL, filename_handler = NULL,  #>     getDescription: function ()  #>     getDimensions: function ()  #>     getId: function ()  #>     getNamespaceDefinition: function (recursive = FALSE)  #>     getSubtype: function ()  #>     getSubtypeParent: function ()  #>     getWGS84BoundingBox: function ()  #>     initialize: function (xmlObj, capabilities, serviceVersion, owsVersion, logger = NULL)  #>     isFieldInheritedFrom: function (field)  #>     logger: function (type, text)  #>     loggerType: NULL #>     namespace: OWSNamespace, R6 #>     verbose.debug: FALSE #>     verbose.info: FALSE #>     wrap: FALSE #>   Private: #>     capabilities: WCSCapabilities, OWSCapabilities, OGCAbstractObject, R6 #>     description: WCSCoverageDescription, GMLCOVAbstractCoverage, GMLAbstractCoverage, GMLAbstractFeature, GMLAbstractObject, ISOAbstractObject, geometaLogger, R6 #>     dimensions: list #>     fetchCoverageSummary: function (xmlObj, serviceVersion, owsVersion)  #>     fromComplexTypes: function (value)  #>     owsVersion: 2.0 #>     system_fields: verbose.info verbose.debug loggerType wrap element names ... #>     url: https://geo.vliz.be/geoserver/Emodnetbio/wcs #>     version: 2.0.1 #>     xmlElement: AbstractObject #>     xmlExtraNamespaces: NULL #>     xmlNamespacePrefix: OWS #>     xmlNodeToCharacter: function (x, ..., indent = \"\", tagSeparator = \"\\n\")  #>  emdn_get_coverage_dim_coefs(wcs,                             cov_ids[1:2],                             type = \"temporal\") #> $Emodnetbio__ratio_large_to_small_19582016_L1_err #>   [1] \"1958-02-16T00:00:00.000Z\" \"1958-05-16T00:00:00.000Z\" #>   [3] \"1958-08-16T00:00:00.000Z\" \"1958-11-16T00:00:00.000Z\" #>   [5] \"1959-02-16T00:00:00.000Z\" \"1959-05-16T00:00:00.000Z\" #>   [7] \"1959-08-16T00:00:00.000Z\" \"1959-11-16T00:00:00.000Z\" #>   [9] \"1960-02-16T00:00:00.000Z\" \"1960-05-16T00:00:00.000Z\" #>  [11] \"1960-08-16T00:00:00.000Z\" \"1960-11-16T00:00:00.000Z\" #>  [13] \"1961-02-16T00:00:00.000Z\" \"1961-05-16T00:00:00.000Z\" #>  [15] \"1961-08-16T00:00:00.000Z\" \"1961-11-16T00:00:00.000Z\" #>  [17] \"1962-02-16T00:00:00.000Z\" \"1962-05-16T00:00:00.000Z\" #>  [19] \"1962-08-16T00:00:00.000Z\" \"1962-11-16T00:00:00.000Z\" #>  [21] \"1963-02-16T00:00:00.000Z\" \"1963-05-16T00:00:00.000Z\" #>  [23] \"1963-08-16T00:00:00.000Z\" \"1963-11-16T00:00:00.000Z\" #>  [25] \"1964-02-16T00:00:00.000Z\" \"1964-05-16T00:00:00.000Z\" #>  [27] \"1964-08-16T00:00:00.000Z\" \"1964-11-16T00:00:00.000Z\" #>  [29] \"1965-02-16T00:00:00.000Z\" \"1965-05-16T00:00:00.000Z\" #>  [31] \"1965-08-16T00:00:00.000Z\" \"1965-11-16T00:00:00.000Z\" #>  [33] \"1966-02-16T00:00:00.000Z\" \"1966-05-16T00:00:00.000Z\" #>  [35] \"1966-08-16T00:00:00.000Z\" \"1966-11-16T00:00:00.000Z\" #>  [37] \"1967-02-16T00:00:00.000Z\" \"1967-05-16T00:00:00.000Z\" #>  [39] \"1967-08-16T00:00:00.000Z\" \"1967-11-16T00:00:00.000Z\" #>  [41] \"1968-02-16T00:00:00.000Z\" \"1968-05-16T00:00:00.000Z\" #>  [43] \"1968-08-16T00:00:00.000Z\" \"1968-11-16T00:00:00.000Z\" #>  [45] \"1969-02-16T00:00:00.000Z\" \"1969-05-16T00:00:00.000Z\" #>  [47] \"1969-08-16T00:00:00.000Z\" \"1969-11-16T00:00:00.000Z\" #>  [49] \"1970-02-16T00:00:00.000Z\" \"1970-05-16T00:00:00.000Z\" #>  [51] \"1970-08-16T00:00:00.000Z\" \"1970-11-16T00:00:00.000Z\" #>  [53] \"1971-02-16T00:00:00.000Z\" \"1971-05-16T00:00:00.000Z\" #>  [55] \"1971-08-16T00:00:00.000Z\" \"1971-11-16T00:00:00.000Z\" #>  [57] \"1972-02-16T00:00:00.000Z\" \"1972-05-16T00:00:00.000Z\" #>  [59] \"1972-08-16T00:00:00.000Z\" \"1972-11-16T00:00:00.000Z\" #>  [61] \"1973-02-16T00:00:00.000Z\" \"1973-05-16T00:00:00.000Z\" #>  [63] \"1973-08-16T00:00:00.000Z\" \"1973-11-16T00:00:00.000Z\" #>  [65] \"1974-02-16T00:00:00.000Z\" \"1974-05-16T00:00:00.000Z\" #>  [67] \"1974-08-16T00:00:00.000Z\" \"1974-11-16T00:00:00.000Z\" #>  [69] \"1975-02-16T00:00:00.000Z\" \"1975-05-16T00:00:00.000Z\" #>  [71] \"1975-08-16T00:00:00.000Z\" \"1975-11-16T00:00:00.000Z\" #>  [73] \"1976-02-16T00:00:00.000Z\" \"1976-05-16T00:00:00.000Z\" #>  [75] \"1976-08-16T00:00:00.000Z\" \"1976-11-16T00:00:00.000Z\" #>  [77] \"1977-02-16T00:00:00.000Z\" \"1977-05-16T00:00:00.000Z\" #>  [79] \"1977-08-16T00:00:00.000Z\" \"1977-11-16T00:00:00.000Z\" #>  [81] \"1978-02-16T00:00:00.000Z\" \"1978-05-16T00:00:00.000Z\" #>  [83] \"1978-08-16T00:00:00.000Z\" \"1978-11-16T00:00:00.000Z\" #>  [85] \"1979-02-16T00:00:00.000Z\" \"1979-05-16T00:00:00.000Z\" #>  [87] \"1979-08-16T00:00:00.000Z\" \"1979-11-16T00:00:00.000Z\" #>  [89] \"1980-02-16T00:00:00.000Z\" \"1980-05-16T00:00:00.000Z\" #>  [91] \"1980-08-16T00:00:00.000Z\" \"1980-11-16T00:00:00.000Z\" #>  [93] \"1981-02-16T00:00:00.000Z\" \"1981-05-16T00:00:00.000Z\" #>  [95] \"1981-08-16T00:00:00.000Z\" \"1981-11-16T00:00:00.000Z\" #>  [97] \"1982-02-16T00:00:00.000Z\" \"1982-05-16T00:00:00.000Z\" #>  [99] \"1982-08-16T00:00:00.000Z\" \"1982-11-16T00:00:00.000Z\" #> [101] \"1983-02-16T00:00:00.000Z\" \"1983-05-16T00:00:00.000Z\" #> [103] \"1983-08-16T00:00:00.000Z\" \"1983-11-16T00:00:00.000Z\" #> [105] \"1984-02-16T00:00:00.000Z\" \"1984-05-16T00:00:00.000Z\" #> [107] \"1984-08-16T00:00:00.000Z\" \"1984-11-16T00:00:00.000Z\" #> [109] \"1985-02-16T00:00:00.000Z\" \"1985-05-16T00:00:00.000Z\" #> [111] \"1985-08-16T00:00:00.000Z\" \"1985-11-16T00:00:00.000Z\" #> [113] \"1986-02-16T00:00:00.000Z\" \"1986-05-16T00:00:00.000Z\" #> [115] \"1986-08-16T00:00:00.000Z\" \"1986-11-16T00:00:00.000Z\" #> [117] \"1987-02-16T00:00:00.000Z\" \"1987-05-16T00:00:00.000Z\" #> [119] \"1987-08-16T00:00:00.000Z\" \"1987-11-16T00:00:00.000Z\" #> [121] \"1988-02-16T00:00:00.000Z\" \"1988-05-16T00:00:00.000Z\" #> [123] \"1988-08-16T00:00:00.000Z\" \"1988-11-16T00:00:00.000Z\" #> [125] \"1989-02-16T00:00:00.000Z\" \"1989-05-16T00:00:00.000Z\" #> [127] \"1989-08-16T00:00:00.000Z\" \"1989-11-16T00:00:00.000Z\" #> [129] \"1990-02-16T00:00:00.000Z\" \"1990-05-16T00:00:00.000Z\" #> [131] \"1990-08-16T00:00:00.000Z\" \"1990-11-16T00:00:00.000Z\" #> [133] \"1991-02-16T00:00:00.000Z\" \"1991-05-16T00:00:00.000Z\" #> [135] \"1991-08-16T00:00:00.000Z\" \"1991-11-16T00:00:00.000Z\" #> [137] \"1992-02-16T00:00:00.000Z\" \"1992-05-16T00:00:00.000Z\" #> [139] \"1992-08-16T00:00:00.000Z\" \"1992-11-16T00:00:00.000Z\" #> [141] \"1993-02-16T00:00:00.000Z\" \"1993-05-16T00:00:00.000Z\" #> [143] \"1993-08-16T00:00:00.000Z\" \"1993-11-16T00:00:00.000Z\" #> [145] \"1994-02-16T00:00:00.000Z\" \"1994-05-16T00:00:00.000Z\" #> [147] \"1994-08-16T00:00:00.000Z\" \"1994-11-16T00:00:00.000Z\" #> [149] \"1995-02-16T00:00:00.000Z\" \"1995-05-16T00:00:00.000Z\" #> [151] \"1995-08-16T00:00:00.000Z\" \"1995-11-16T00:00:00.000Z\" #> [153] \"1996-02-16T00:00:00.000Z\" \"1996-05-16T00:00:00.000Z\" #> [155] \"1996-08-16T00:00:00.000Z\" \"1996-11-16T00:00:00.000Z\" #> [157] \"1997-02-16T00:00:00.000Z\" \"1997-05-16T00:00:00.000Z\" #> [159] \"1997-08-16T00:00:00.000Z\" \"1997-11-16T00:00:00.000Z\" #> [161] \"1998-02-16T00:00:00.000Z\" \"1998-05-16T00:00:00.000Z\" #> [163] \"1998-08-16T00:00:00.000Z\" \"1998-11-16T00:00:00.000Z\" #> [165] \"1999-02-16T00:00:00.000Z\" \"1999-05-16T00:00:00.000Z\" #> [167] \"1999-08-16T00:00:00.000Z\" \"1999-11-16T00:00:00.000Z\" #> [169] \"2000-02-16T00:00:00.000Z\" \"2000-05-16T00:00:00.000Z\" #> [171] \"2000-08-16T00:00:00.000Z\" \"2000-11-16T00:00:00.000Z\" #> [173] \"2001-02-16T00:00:00.000Z\" \"2001-05-16T00:00:00.000Z\" #> [175] \"2001-08-16T00:00:00.000Z\" \"2001-11-16T00:00:00.000Z\" #> [177] \"2002-02-16T00:00:00.000Z\" \"2002-05-16T00:00:00.000Z\" #> [179] \"2002-08-16T00:00:00.000Z\" \"2002-11-16T00:00:00.000Z\" #> [181] \"2003-02-16T00:00:00.000Z\" \"2003-05-16T00:00:00.000Z\" #> [183] \"2003-08-16T00:00:00.000Z\" \"2003-11-16T00:00:00.000Z\" #> [185] \"2004-02-16T00:00:00.000Z\" \"2004-05-16T00:00:00.000Z\" #> [187] \"2004-08-16T00:00:00.000Z\" \"2004-11-16T00:00:00.000Z\" #> [189] \"2005-02-16T00:00:00.000Z\" \"2005-05-16T00:00:00.000Z\" #> [191] \"2005-08-16T00:00:00.000Z\" \"2005-11-16T00:00:00.000Z\" #> [193] \"2006-02-16T00:00:00.000Z\" \"2006-05-16T00:00:00.000Z\" #> [195] \"2006-08-16T00:00:00.000Z\" \"2006-11-16T00:00:00.000Z\" #> [197] \"2007-02-16T00:00:00.000Z\" \"2007-05-16T00:00:00.000Z\" #> [199] \"2007-08-16T00:00:00.000Z\" \"2007-11-16T00:00:00.000Z\" #> [201] \"2008-02-16T00:00:00.000Z\" \"2008-05-16T00:00:00.000Z\" #> [203] \"2008-08-16T00:00:00.000Z\" \"2008-11-16T00:00:00.000Z\" #> [205] \"2009-02-16T00:00:00.000Z\" \"2009-05-16T00:00:00.000Z\" #> [207] \"2009-08-16T00:00:00.000Z\" \"2009-11-16T00:00:00.000Z\" #> [209] \"2010-02-16T00:00:00.000Z\" \"2010-05-16T00:00:00.000Z\" #> [211] \"2010-08-16T00:00:00.000Z\" \"2010-11-16T00:00:00.000Z\" #> [213] \"2011-02-16T00:00:00.000Z\" \"2011-05-16T00:00:00.000Z\" #> [215] \"2011-08-16T00:00:00.000Z\" \"2011-11-16T00:00:00.000Z\" #> [217] \"2012-02-16T00:00:00.000Z\" \"2012-05-16T00:00:00.000Z\" #> [219] \"2012-08-16T00:00:00.000Z\" \"2012-11-16T00:00:00.000Z\" #> [221] \"2013-02-16T00:00:00.000Z\" \"2013-05-16T00:00:00.000Z\" #> [223] \"2013-08-16T00:00:00.000Z\" \"2013-11-16T00:00:00.000Z\" #> [225] \"2014-02-16T00:00:00.000Z\" \"2014-05-16T00:00:00.000Z\" #> [227] \"2014-08-16T00:00:00.000Z\" \"2014-11-16T00:00:00.000Z\" #> [229] \"2015-02-16T00:00:00.000Z\" \"2015-05-16T00:00:00.000Z\" #> [231] \"2015-08-16T00:00:00.000Z\" \"2015-11-16T00:00:00.000Z\" #> [233] \"2016-02-16T00:00:00.000Z\" \"2016-05-16T00:00:00.000Z\" #> [235] \"2016-08-16T00:00:00.000Z\" \"2016-11-16T00:00:00.000Z\" #> attr(,\"type\") #> temporal_coefficents #>  #> $Emodnetbio__aca_spp_19582016_L1 #>   [1] \"1958-02-16T00:00:00.000Z\" \"1958-05-16T00:00:00.000Z\" #>   [3] \"1958-08-16T00:00:00.000Z\" \"1958-11-16T00:00:00.000Z\" #>   [5] \"1959-02-16T00:00:00.000Z\" \"1959-05-16T00:00:00.000Z\" #>   [7] \"1959-08-16T00:00:00.000Z\" \"1959-11-16T00:00:00.000Z\" #>   [9] \"1960-02-16T00:00:00.000Z\" \"1960-05-16T00:00:00.000Z\" #>  [11] \"1960-08-16T00:00:00.000Z\" \"1960-11-16T00:00:00.000Z\" #>  [13] \"1961-02-16T00:00:00.000Z\" \"1961-05-16T00:00:00.000Z\" #>  [15] \"1961-08-16T00:00:00.000Z\" \"1961-11-16T00:00:00.000Z\" #>  [17] \"1962-02-16T00:00:00.000Z\" \"1962-05-16T00:00:00.000Z\" #>  [19] \"1962-08-16T00:00:00.000Z\" \"1962-11-16T00:00:00.000Z\" #>  [21] \"1963-02-16T00:00:00.000Z\" \"1963-05-16T00:00:00.000Z\" #>  [23] \"1963-08-16T00:00:00.000Z\" \"1963-11-16T00:00:00.000Z\" #>  [25] \"1964-02-16T00:00:00.000Z\" \"1964-05-16T00:00:00.000Z\" #>  [27] \"1964-08-16T00:00:00.000Z\" \"1964-11-16T00:00:00.000Z\" #>  [29] \"1965-02-16T00:00:00.000Z\" \"1965-05-16T00:00:00.000Z\" #>  [31] \"1965-08-16T00:00:00.000Z\" \"1965-11-16T00:00:00.000Z\" #>  [33] \"1966-02-16T00:00:00.000Z\" \"1966-05-16T00:00:00.000Z\" #>  [35] \"1966-08-16T00:00:00.000Z\" \"1966-11-16T00:00:00.000Z\" #>  [37] \"1967-02-16T00:00:00.000Z\" \"1967-05-16T00:00:00.000Z\" #>  [39] \"1967-08-16T00:00:00.000Z\" \"1967-11-16T00:00:00.000Z\" #>  [41] \"1968-02-16T00:00:00.000Z\" \"1968-05-16T00:00:00.000Z\" #>  [43] \"1968-08-16T00:00:00.000Z\" \"1968-11-16T00:00:00.000Z\" #>  [45] \"1969-02-16T00:00:00.000Z\" \"1969-05-16T00:00:00.000Z\" #>  [47] \"1969-08-16T00:00:00.000Z\" \"1969-11-16T00:00:00.000Z\" #>  [49] \"1970-02-16T00:00:00.000Z\" \"1970-05-16T00:00:00.000Z\" #>  [51] \"1970-08-16T00:00:00.000Z\" \"1970-11-16T00:00:00.000Z\" #>  [53] \"1971-02-16T00:00:00.000Z\" \"1971-05-16T00:00:00.000Z\" #>  [55] \"1971-08-16T00:00:00.000Z\" \"1971-11-16T00:00:00.000Z\" #>  [57] \"1972-02-16T00:00:00.000Z\" \"1972-05-16T00:00:00.000Z\" #>  [59] \"1972-08-16T00:00:00.000Z\" \"1972-11-16T00:00:00.000Z\" #>  [61] \"1973-02-16T00:00:00.000Z\" \"1973-05-16T00:00:00.000Z\" #>  [63] \"1973-08-16T00:00:00.000Z\" \"1973-11-16T00:00:00.000Z\" #>  [65] \"1974-02-16T00:00:00.000Z\" \"1974-05-16T00:00:00.000Z\" #>  [67] \"1974-08-16T00:00:00.000Z\" \"1974-11-16T00:00:00.000Z\" #>  [69] \"1975-02-16T00:00:00.000Z\" \"1975-05-16T00:00:00.000Z\" #>  [71] \"1975-08-16T00:00:00.000Z\" \"1975-11-16T00:00:00.000Z\" #>  [73] \"1976-02-16T00:00:00.000Z\" \"1976-05-16T00:00:00.000Z\" #>  [75] \"1976-08-16T00:00:00.000Z\" \"1976-11-16T00:00:00.000Z\" #>  [77] \"1977-02-16T00:00:00.000Z\" \"1977-05-16T00:00:00.000Z\" #>  [79] \"1977-08-16T00:00:00.000Z\" \"1977-11-16T00:00:00.000Z\" #>  [81] \"1978-02-16T00:00:00.000Z\" \"1978-05-16T00:00:00.000Z\" #>  [83] \"1978-08-16T00:00:00.000Z\" \"1978-11-16T00:00:00.000Z\" #>  [85] \"1979-02-16T00:00:00.000Z\" \"1979-05-16T00:00:00.000Z\" #>  [87] \"1979-08-16T00:00:00.000Z\" \"1979-11-16T00:00:00.000Z\" #>  [89] \"1980-02-16T00:00:00.000Z\" \"1980-05-16T00:00:00.000Z\" #>  [91] \"1980-08-16T00:00:00.000Z\" \"1980-11-16T00:00:00.000Z\" #>  [93] \"1981-02-16T00:00:00.000Z\" \"1981-05-16T00:00:00.000Z\" #>  [95] \"1981-08-16T00:00:00.000Z\" \"1981-11-16T00:00:00.000Z\" #>  [97] \"1982-02-16T00:00:00.000Z\" \"1982-05-16T00:00:00.000Z\" #>  [99] \"1982-08-16T00:00:00.000Z\" \"1982-11-16T00:00:00.000Z\" #> [101] \"1983-02-16T00:00:00.000Z\" \"1983-05-16T00:00:00.000Z\" #> [103] \"1983-08-16T00:00:00.000Z\" \"1983-11-16T00:00:00.000Z\" #> [105] \"1984-02-16T00:00:00.000Z\" \"1984-05-16T00:00:00.000Z\" #> [107] \"1984-08-16T00:00:00.000Z\" \"1984-11-16T00:00:00.000Z\" #> [109] \"1985-02-16T00:00:00.000Z\" \"1985-05-16T00:00:00.000Z\" #> [111] \"1985-08-16T00:00:00.000Z\" \"1985-11-16T00:00:00.000Z\" #> [113] \"1986-02-16T00:00:00.000Z\" \"1986-05-16T00:00:00.000Z\" #> [115] \"1986-08-16T00:00:00.000Z\" \"1986-11-16T00:00:00.000Z\" #> [117] \"1987-02-16T00:00:00.000Z\" \"1987-05-16T00:00:00.000Z\" #> [119] \"1987-08-16T00:00:00.000Z\" \"1987-11-16T00:00:00.000Z\" #> [121] \"1988-02-16T00:00:00.000Z\" \"1988-05-16T00:00:00.000Z\" #> [123] \"1988-08-16T00:00:00.000Z\" \"1988-11-16T00:00:00.000Z\" #> [125] \"1989-02-16T00:00:00.000Z\" \"1989-05-16T00:00:00.000Z\" #> [127] \"1989-08-16T00:00:00.000Z\" \"1989-11-16T00:00:00.000Z\" #> [129] \"1990-02-16T00:00:00.000Z\" \"1990-05-16T00:00:00.000Z\" #> [131] \"1990-08-16T00:00:00.000Z\" \"1990-11-16T00:00:00.000Z\" #> [133] \"1991-02-16T00:00:00.000Z\" \"1991-05-16T00:00:00.000Z\" #> [135] \"1991-08-16T00:00:00.000Z\" \"1991-11-16T00:00:00.000Z\" #> [137] \"1992-02-16T00:00:00.000Z\" \"1992-05-16T00:00:00.000Z\" #> [139] \"1992-08-16T00:00:00.000Z\" \"1992-11-16T00:00:00.000Z\" #> [141] \"1993-02-16T00:00:00.000Z\" \"1993-05-16T00:00:00.000Z\" #> [143] \"1993-08-16T00:00:00.000Z\" \"1993-11-16T00:00:00.000Z\" #> [145] \"1994-02-16T00:00:00.000Z\" \"1994-05-16T00:00:00.000Z\" #> [147] \"1994-08-16T00:00:00.000Z\" \"1994-11-16T00:00:00.000Z\" #> [149] \"1995-02-16T00:00:00.000Z\" \"1995-05-16T00:00:00.000Z\" #> [151] \"1995-08-16T00:00:00.000Z\" \"1995-11-16T00:00:00.000Z\" #> [153] \"1996-02-16T00:00:00.000Z\" \"1996-05-16T00:00:00.000Z\" #> [155] \"1996-08-16T00:00:00.000Z\" \"1996-11-16T00:00:00.000Z\" #> [157] \"1997-02-16T00:00:00.000Z\" \"1997-05-16T00:00:00.000Z\" #> [159] \"1997-08-16T00:00:00.000Z\" \"1997-11-16T00:00:00.000Z\" #> [161] \"1998-02-16T00:00:00.000Z\" \"1998-05-16T00:00:00.000Z\" #> [163] \"1998-08-16T00:00:00.000Z\" \"1998-11-16T00:00:00.000Z\" #> [165] \"1999-02-16T00:00:00.000Z\" \"1999-05-16T00:00:00.000Z\" #> [167] \"1999-08-16T00:00:00.000Z\" \"1999-11-16T00:00:00.000Z\" #> [169] \"2000-02-16T00:00:00.000Z\" \"2000-05-16T00:00:00.000Z\" #> [171] \"2000-08-16T00:00:00.000Z\" \"2000-11-16T00:00:00.000Z\" #> [173] \"2001-02-16T00:00:00.000Z\" \"2001-05-16T00:00:00.000Z\" #> [175] \"2001-08-16T00:00:00.000Z\" \"2001-11-16T00:00:00.000Z\" #> [177] \"2002-02-16T00:00:00.000Z\" \"2002-05-16T00:00:00.000Z\" #> [179] \"2002-08-16T00:00:00.000Z\" \"2002-11-16T00:00:00.000Z\" #> [181] \"2003-02-16T00:00:00.000Z\" \"2003-05-16T00:00:00.000Z\" #> [183] \"2003-08-16T00:00:00.000Z\" \"2003-11-16T00:00:00.000Z\" #> [185] \"2004-02-16T00:00:00.000Z\" \"2004-05-16T00:00:00.000Z\" #> [187] \"2004-08-16T00:00:00.000Z\" \"2004-11-16T00:00:00.000Z\" #> [189] \"2005-02-16T00:00:00.000Z\" \"2005-05-16T00:00:00.000Z\" #> [191] \"2005-08-16T00:00:00.000Z\" \"2005-11-16T00:00:00.000Z\" #> [193] \"2006-02-16T00:00:00.000Z\" \"2006-05-16T00:00:00.000Z\" #> [195] \"2006-08-16T00:00:00.000Z\" \"2006-11-16T00:00:00.000Z\" #> [197] \"2007-02-16T00:00:00.000Z\" \"2007-05-16T00:00:00.000Z\" #> [199] \"2007-08-16T00:00:00.000Z\" \"2007-11-16T00:00:00.000Z\" #> [201] \"2008-02-16T00:00:00.000Z\" \"2008-05-16T00:00:00.000Z\" #> [203] \"2008-08-16T00:00:00.000Z\" \"2008-11-16T00:00:00.000Z\" #> [205] \"2009-02-16T00:00:00.000Z\" \"2009-05-16T00:00:00.000Z\" #> [207] \"2009-08-16T00:00:00.000Z\" \"2009-11-16T00:00:00.000Z\" #> [209] \"2010-02-16T00:00:00.000Z\" \"2010-05-16T00:00:00.000Z\" #> [211] \"2010-08-16T00:00:00.000Z\" \"2010-11-16T00:00:00.000Z\" #> [213] \"2011-02-16T00:00:00.000Z\" \"2011-05-16T00:00:00.000Z\" #> [215] \"2011-08-16T00:00:00.000Z\" \"2011-11-16T00:00:00.000Z\" #> [217] \"2012-02-16T00:00:00.000Z\" \"2012-05-16T00:00:00.000Z\" #> [219] \"2012-08-16T00:00:00.000Z\" \"2012-11-16T00:00:00.000Z\" #> [221] \"2013-02-16T00:00:00.000Z\" \"2013-05-16T00:00:00.000Z\" #> [223] \"2013-08-16T00:00:00.000Z\" \"2013-11-16T00:00:00.000Z\" #> [225] \"2014-02-16T00:00:00.000Z\" \"2014-05-16T00:00:00.000Z\" #> [227] \"2014-08-16T00:00:00.000Z\" \"2014-11-16T00:00:00.000Z\" #> [229] \"2015-02-16T00:00:00.000Z\" \"2015-05-16T00:00:00.000Z\" #> [231] \"2015-08-16T00:00:00.000Z\" \"2015-11-16T00:00:00.000Z\" #> [233] \"2016-02-16T00:00:00.000Z\" \"2016-05-16T00:00:00.000Z\" #> [235] \"2016-08-16T00:00:00.000Z\" \"2016-11-16T00:00:00.000Z\" #> attr(,\"type\") #> temporal_coefficents #>"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_wcs_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","title":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","text":"Get EMODnet WCS service available coverage information.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_wcs_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","text":"","code":"emdn_get_wcs_info(   wcs = NULL,   service = NULL,   service_version = c(\"2.0.1\", \"2.1.0\", \"2.0.0\", \"1.1.1\", \"1.1.0\"),   logger = c(\"NONE\", \"INFO\", \"DEBUG\") )  emdn_get_wcs_info_all(logger = c(\"NONE\", \"INFO\", \"DEBUG\"))  emdn_get_coverage_info(   wcs = NULL,   service = NULL,   coverage_ids,   service_version = c(\"2.0.1\", \"2.1.0\", \"2.0.0\", \"1.1.1\", \"1.1.0\"),   logger = c(\"NONE\", \"INFO\", \"DEBUG\") )"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_wcs_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","text":"wcs WCSClient R6 object, created function emdn_init_wcs_client. service EMODnet OGC WCS service name. available services, see emdn_wcs(). service_version WCS service version. Defaults \"2.0.1\". logger character string. Level logger: 'NONE' logger, 'INFO' get ows4R logs, 'DEBUG' internal logs (Curl details) coverage_ids character vector coverage IDs.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_wcs_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","text":"emdn_get_wcs_info & emdn_get_wcs_info return list service level metadata, including tibble containing coverage level metadata coverage available service. emdn_get_coverage_info returns list containing tibble detailed metadata coverage specified.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_wcs_info.html","id":"emdn-get-wcs-info-emdn-get-wcs-info-all","dir":"Reference","previous_headings":"","what":"emdn_get_wcs_info / emdn_get_wcs_info_all","title":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","text":"emdn_get_wcs_info emdn_get_wcs_info_all return list following metadata: data_source: EMODnet source data. service_name: EMODnet WCS service name. service_url: EMODnet WCS service URL. service_title: EMODnet WCS service title. service_abstract: EMODnet WCS service abstract. service_access_constraits: access constraints associated EMODnet WCS service. service_fees: access fees associated EMODnet WCS service. service_type: EMODnet WCS service type. coverage_details: tibble details coverage available EMODnet WCS service: coverage_id: coverage ID. dim_n: number coverage dimensions dim_names: coverage dimension names, units (brackets) types. extent: coverage extent (xmin, ymin, xmax ymax). crs: coverage CRS (Coordinate Reference System). wgs84_bbox: coverage extent (xmin, ymin, xmax ymax) WGS84 (EPSG:4326) CRS coordinates. temporal_extent: coverage temporal extent (min - max), NA coverage contains temporal dimension. vertical_extent: coverage vertical extent (min - max), NA coverage contains vertical dimension. subtype: coverage subtype.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_wcs_info.html","id":"emdn-get-coverage-info","dir":"Reference","previous_headings":"","what":"emdn_get_coverage_info","title":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","text":"emdn_get_coverage_info returns tibble row coverage specified columns following details: data_source: EMODnet source data. service_name: EMODnet WCS service name. service_url: EMODnet WCS service URL. coverage_ids: coverage ID. band_description: description data contained band coverage. band_uom: unit measurement data contained band coverage. constraint: range values data contained band coverage. nil_value: nil value data contained band coverage. grid_size: spatial size coverage grid (ncol x nrow). resolution: spatial resolution (pixel size) coverage grid CRS units measurement (size x dimension x size y dimension). dim_n: number coverage dimensions dim_names: coverage dimension names, units (brackets) types. extent: coverage extent (xmin, ymin, xmax ymax). crs: coverage CRS (Coordinate Reference System). wgs84_bbox: coverage extent (xmin, ymin, xmax ymax) WGS84 (EPSG:4326) CRS coordinates. temporal_extent: coverage temporal extent (min - max), NA coverage contains temporal dimension. vertical_extent: coverage vertical extent (min - max), NA coverage contains vertical dimension. subtype: coverage subtype. fn_seq_rule: function describing sequence rule specifies relationship axes data coordinate system axes. fn_start_point: location origin data coordinate system. fn_axis_order: axis order direction mapping values onto grid, beginning starting point. example, \"+2 +1\" indicates value range ordered bottom left top right grid envelope - lowest highest x-axis direction first (+2), lowest highest y-axis direction (+1) starting_point. additional details WCS metadata, see GDAL wiki section WCS Basics GDAL","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_wcs_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","text":"minimize number requests sent webservices, functions use memoise cache results inside active R session. clear cache, re-start R run memoise::forget(emdn_get_wcs_info)/memoise::forget(emdn_get_coverage_info)","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_wcs_info.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","text":"emdn_get_wcs_info: Get info coverages EMODnet WCS service. emdn_get_wcs_info_all: Get metadata services available coverages service. emdn_get_coverage_info: Get metadata specific coverages. Requires WCSClient R6 object input.","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_get_wcs_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get EMODnet WCS service and available coverage information. — emdn_get_wcs_info","text":"","code":"# Get information from a wcs object. wcs <- emdn_init_wcs_client(service = \"seabed_habitats\") #> ✔ WCS client created succesfully #> ℹ Service: <https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open_maplibrary/wcs> #> ℹ Service: \"2.0.1\" emdn_get_wcs_info(wcs) #> $data_source #> [1] \"emodnet_wcs\" #>  #> $service_name #> [1] \"seabed_habitats\" #>  #> $service_url #> [1] \"https://ows.emodnet-seabedhabitats.eu/geoserver/emodnet_open_maplibrary/wcs\" #>  #> $service_title #> [1] \"EMODnet Seabed Habitats Map Library WCS Service\" #>  #> $service_abstract #> [1] \"WCS end-point for individual habitat maps and models held by EMODnet Seabed Habitats.\\r\\n\\r\\nIncludes all data with access limitations of \\\"View and Download\\\" (excluding \\\"View only\\\" data)\" #>  #> $service_access_constraits #> [1] \"None\" #>  #> $service_fees #> [1] \"None\" #>  #> $service_type #> [1] \"urn:ogc:service:wcs\" #>  #> $coverage_details #> # A tibble: 7 × 9 #>   coverage_id         dim_n dim_n…¹ extent crs   wgs84…² tempo…³ verti…⁴ subtype #>   <chr>               <int> <chr>   <chr>  <chr> <chr>   <chr>   <chr>   <chr>   #> 1 emodnet_open_mapli…     2 x(m):g… 34317… EPSG… -6.56,… NA      NA      Rectif… #> 2 emodnet_open_mapli…     2 x(m):g… 34317… EPSG… -6.56,… NA      NA      Rectif… #> 3 emodnet_open_mapli…     2 x(m):g… 34314… EPSG… -6.56,… NA      NA      Rectif… #> 4 emodnet_open_mapli…     2 lat(de… -10.0… EPSG… -10.03… NA      NA      Rectif… #> 5 emodnet_open_mapli…     2 lat(de… -10.0… EPSG… -10.01… NA      NA      Rectif… #> 6 emodnet_open_mapli…     2 lat(de… -9.97… EPSG… -9.97,… NA      NA      Rectif… #> 7 emodnet_open_mapli…     2 lat(de… -10.0… EPSG… -10.03… NA      NA      Rectif… #> # … with abbreviated variable names ¹​dim_names, ²​wgs84_bbox, ³​temporal_extent, #> #   ⁴​vertical_extent #>  # Get information using a service name. emdn_get_wcs_info(service = \"biology\") #> ✔ WCS client created succesfully #> ℹ Service: <https://geo.vliz.be/geoserver/Emodnetbio/wcs> #> ℹ Service: \"2.0.1\" #> $data_source #> [1] \"emodnet_wcs\" #>  #> $service_name #> [1] \"biology\" #>  #> $service_url #> [1] \"https://geo.vliz.be/geoserver/Emodnetbio/wcs\" #>  #> $service_title #> [1] \"EMODnet Biology\" #>  #> $service_abstract #> [1] \"The EMODnet Biology products include a set of gridded map layers showing the average abundance of marine species for different time windows (seasonal, annual) using geospatial modelling. The spatial modelling tool used to calculate the gridded abundance maps is based on DIVA. DIVA (Data-Interpolating Variational Analysis) is a tool to create gridded data sets from discrete point measurements of the ocean. For the representation of time dynamics, it was decided to produce gridded maps for sliding time windows, e.g. combining one or more years  in one gridded map, so that relatively smooth animated GIF presentations can be produced that show the essential change over time. EMODnet Biology’s data products include the Operational Ocean Products and Services (OOPS), harvested by ICES.\" #>  #> $service_access_constraits #> [1] \"NONE\" #>  #> $service_fees #> [1] \"NONE\" #>  #> $service_type #> [1] \"urn:ogc:service:wcs\" #>  #> $coverage_details #> # A tibble: 10 × 9 #>    coverage_id        dim_n dim_n…¹ extent crs   wgs84…² tempo…³ verti…⁴ subtype #>    <chr>              <int> <chr>   <chr>  <chr> <chr>   <chr>   <chr>   <chr>   #>  1 Emodnetbio__ratio…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  2 Emodnetbio__aca_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  3 Emodnetbio__cal_f…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  4 Emodnetbio__cal_h…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  5 Emodnetbio__met_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  6 Emodnetbio__oit_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  7 Emodnetbio__tem_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  8 Emodnetbio__chli_…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #>  9 Emodnetbio__tot_l…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #> 10 Emodnetbio__tot_s…     3 lat(de… -75.0… EPSG… -75.05… 1958-0… NA      Rectif… #> # … with abbreviated variable names ¹​dim_names, ²​wgs84_bbox, ³​temporal_extent, #> #   ⁴​vertical_extent #>  # Get detailed info for specific coverages from wcs object coverage_ids <- c(   \"emodnet_open_maplibrary__mediseh_cora\",   \"emodnet_open_maplibrary__mediseh_posidonia\" ) emdn_get_coverage_info(wcs = wcs,                        coverage_ids = coverage_ids) #> # A tibble: 2 × 21 #>   data_…¹ servi…² servi…³ cover…⁴ band_…⁵ band_…⁶ const…⁷ nil_va…⁸ dim_n dim_n…⁹ #>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>      <dbl> <int> <chr>   #> 1 emodne… https:… seabed… emodne… GRAY_I… W.m-2.… 0, 1    -3.40e38     2 x(m):g… #> 2 emodne… https:… seabed… emodne… Probab… W.m-2.… -3.402… -1.00e 4     2 x(m):g… #> # … with 11 more variables: grid_size <chr>, resolution <chr>, extent <chr>, #> #   crs <chr>, wgs84_extent <chr>, temporal_extent <chr>, #> #   vertical_extent <chr>, subtype <chr>, fn_seq_rule <chr>, #> #   fn_start_point <chr>, fn_axis_order <chr>, and abbreviated variable names #> #   ¹​data_source, ²​service_name, ³​service_url, ⁴​coverage_id, ⁵​band_description, #> #   ⁶​band_uom, ⁷​constraint, ⁸​nil_value, ⁹​dim_names"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_init_wcs_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialise an EMODnet WCS client — emdn_init_wcs_client","title":"Initialise an EMODnet WCS client — emdn_init_wcs_client","text":"Initialise EMODnet WCS client","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_init_wcs_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialise an EMODnet WCS client — emdn_init_wcs_client","text":"","code":"emdn_init_wcs_client(   service,   service_version = c(\"2.0.1\", \"2.1.0\", \"2.0.0\", \"1.1.1\", \"1.1.0\"),   logger = c(\"NONE\", \"INFO\", \"DEBUG\") )"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_init_wcs_client.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialise an EMODnet WCS client — emdn_init_wcs_client","text":"service EMODnet OGC WCS service name. available services, see emdn_wcs(). service_version WCS service version. Defaults \"2.0.1\". logger character string. Level logger: 'NONE' logger, 'INFO' get ows4R logs, 'DEBUG' internal logs (Curl details)","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_init_wcs_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialise an EMODnet WCS client — emdn_init_wcs_client","text":"ows4R::WCSClient R6 object methods interfacing OGC Web Feature Service.","code":""},{"path":[]},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_init_wcs_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialise an EMODnet WCS client — emdn_init_wcs_client","text":"","code":"if (FALSE) { wcs <- emdn_init_wcs_client(service = \"bathymetry\") }"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_wcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Available EMODnet Web Coverage Services — emdn_wcs","title":"Available EMODnet Web Coverage Services — emdn_wcs","text":"Available EMODnet Web Coverage Services","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_wcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available EMODnet Web Coverage Services — emdn_wcs","text":"","code":"emdn_wcs()"},{"path":"https://emodnet.github.io/EMODnetWCS/reference/emdn_wcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Available EMODnet Web Coverage Services — emdn_wcs","text":"Tibble available EMODnet Web Coverage Services","code":""},{"path":"https://emodnet.github.io/EMODnetWCS/news/index.html","id":"emodnetwcs-0009009","dir":"Changelog","previous_headings":"","what":"EMODnetWCS 0.0.0.9009","title":"EMODnetWCS 0.0.0.9009","text":"Added NEWS.md file track changes package.","code":""}]
